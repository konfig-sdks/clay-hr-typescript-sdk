/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReportsGetContentForReport401Response } from '../models';
// @ts-ignore
import { ReportsGetContentForReport404Response } from '../models';
// @ts-ignore
import { ReportsGetContentForReport409Response } from '../models';
// @ts-ignore
import { ReportsGetContentForReportResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get content for report by analytic Id
         * @param {string} analyticId analyticId
         * @param {string} [authorization] Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentByAnalyticId: async (analyticId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analyticId' is not null or undefined
            assertParamExists('getContentByAnalyticId', 'analyticId', analyticId)
            const localVarPath = `/api/report/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (analyticId !== undefined) {
                localVarQueryParameter['analyticId'] = analyticId;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/report/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve report content
         * @param {number} analyticId The ID of the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentForReport: async (analyticId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analyticId' is not null or undefined
            assertParamExists('getContentForReport', 'analyticId', analyticId)
            const localVarPath = `/report/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (analyticId !== undefined) {
                localVarQueryParameter['analyticId'] = analyticId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get report
         * @param {string} analyticId analyticId
         * @param {string} [authorization] Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDetails: async (analyticId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analyticId' is not null or undefined
            assertParamExists('getReportDetails', 'analyticId', analyticId)
            const localVarPath = `/api/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (analyticId !== undefined) {
                localVarQueryParameter['analyticId'] = analyticId;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/report',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get content for report by analytic Id
         * @param {ReportsApiGetContentByAnalyticIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentByAnalyticId(requestParameters: ReportsApiGetContentByAnalyticIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentByAnalyticId(requestParameters.analyticId, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve report content
         * @param {ReportsApiGetContentForReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentForReport(requestParameters: ReportsApiGetContentForReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetContentForReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentForReport(requestParameters.analyticId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get report
         * @param {ReportsApiGetReportDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportDetails(requestParameters: ReportsApiGetReportDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportDetails(requestParameters.analyticId, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get content for report by analytic Id
         * @param {ReportsApiGetContentByAnalyticIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentByAnalyticId(requestParameters: ReportsApiGetContentByAnalyticIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getContentByAnalyticId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve report content
         * @param {ReportsApiGetContentForReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentForReport(requestParameters: ReportsApiGetContentForReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetContentForReportResponse> {
            return localVarFp.getContentForReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get report
         * @param {ReportsApiGetReportDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDetails(requestParameters: ReportsApiGetReportDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getReportDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getContentByAnalyticId operation in ReportsApi.
 * @export
 * @interface ReportsApiGetContentByAnalyticIdRequest
 */
export type ReportsApiGetContentByAnalyticIdRequest = {
    
    /**
    * analyticId
    * @type {string}
    * @memberof ReportsApiGetContentByAnalyticId
    */
    readonly analyticId: string
    
    /**
    * Authorization
    * @type {string}
    * @memberof ReportsApiGetContentByAnalyticId
    */
    readonly authorization?: string
    
}

/**
 * Request parameters for getContentForReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetContentForReportRequest
 */
export type ReportsApiGetContentForReportRequest = {
    
    /**
    * The ID of the report.
    * @type {number}
    * @memberof ReportsApiGetContentForReport
    */
    readonly analyticId: number
    
}

/**
 * Request parameters for getReportDetails operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReportDetailsRequest
 */
export type ReportsApiGetReportDetailsRequest = {
    
    /**
    * analyticId
    * @type {string}
    * @memberof ReportsApiGetReportDetails
    */
    readonly analyticId: string
    
    /**
    * Authorization
    * @type {string}
    * @memberof ReportsApiGetReportDetails
    */
    readonly authorization?: string
    
}

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get content for report by analytic Id
     * @param {ReportsApiGetContentByAnalyticIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getContentByAnalyticId(requestParameters: ReportsApiGetContentByAnalyticIdRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getContentByAnalyticId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve report content
     * @param {ReportsApiGetContentForReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getContentForReport(requestParameters: ReportsApiGetContentForReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getContentForReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get report
     * @param {ReportsApiGetReportDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getReportDetails(requestParameters: ReportsApiGetReportDetailsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getReportDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
