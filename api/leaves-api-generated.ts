/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LeaveModel } from '../models';
// @ts-ignore
import { LeavesAddPtoBalanceRequest } from '../models';
// @ts-ignore
import { PtoPolicyModel } from '../models';
// @ts-ignore
import { UserModel } from '../models';
// @ts-ignore
import { UserViewModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LeavesApi - axios parameter creator
 * @export
 */
export const LeavesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add PTO balance.
         * @param {LeavesAddPtoBalanceRequest} leavesAddPtoBalanceRequest ptoBalances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPtoBalance: async (leavesAddPtoBalanceRequest: LeavesAddPtoBalanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leavesAddPtoBalanceRequest' is not null or undefined
            assertParamExists('addPtoBalance', 'leavesAddPtoBalanceRequest', leavesAddPtoBalanceRequest)
            const localVarPath = `/api/userpto/balance/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leavesAddPtoBalanceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/userpto/balance/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leavesAddPtoBalanceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new leave.
         * @param {LeaveModel} leaveModel leaveModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewLeave: async (leaveModel: LeaveModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveModel' is not null or undefined
            assertParamExists('createNewLeave', 'leaveModel', leaveModel)
            const localVarPath = `/api/leaverequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leaveModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/leaverequest',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leaveModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve leave requests within a date range
         * @param {string | Date} endDate End date of the leave.
         * @param {string | Date} startDate Start date of the leave.
         * @param {number} [leaveUserid] The userId for that leave.
         * @param {'AP' | 'WA' | 'RJ' | 'PAP' | 'RCAL'} [status] The status of leave.   AP: Leave approved   WA: Leave is waiting for approval   RJ: Leave has been rejected   PAP: Leave is in a muti layer approval flow and has been partially approved   RCAL:  Leave was approved, taken, computed and then recalled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaveRequestsWithinDateRange: async (endDate: string | Date, startDate: string | Date, leaveUserid?: number, status?: 'AP' | 'WA' | 'RJ' | 'PAP' | 'RCAL', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getLeaveRequestsWithinDateRange', 'endDate', endDate)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getLeaveRequestsWithinDateRange', 'startDate', startDate)
            const localVarPath = `/api/leaverequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (leaveUserid !== undefined) {
                localVarQueryParameter['leaveUserid'] = leaveUserid;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/leaverequests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve leaves for approval/rejection by filtering on basis of Role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeavesBasedOnRole: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/manage/leaves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/manage/leaves',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve remaining hours credit for leave policy
         * @param {string | Date} leaveDate The date of the leave.
         * @param {number} leaveId The Id of the leave.
         * @param {number} leaveUserId The userId for that leave.
         * @param {number} ptoPolicyId The Id of the ptoPolicy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemainingHoursCredit: async (leaveDate: string | Date, leaveId: number, leaveUserId: number, ptoPolicyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveDate' is not null or undefined
            assertParamExists('getRemainingHoursCredit', 'leaveDate', leaveDate)
            // verify required parameter 'leaveId' is not null or undefined
            assertParamExists('getRemainingHoursCredit', 'leaveId', leaveId)
            // verify required parameter 'leaveUserId' is not null or undefined
            assertParamExists('getRemainingHoursCredit', 'leaveUserId', leaveUserId)
            // verify required parameter 'ptoPolicyId' is not null or undefined
            assertParamExists('getRemainingHoursCredit', 'ptoPolicyId', ptoPolicyId)
            const localVarPath = `/api/leave/hours/credit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (leaveDate !== undefined) {
                localVarQueryParameter['leaveDate'] = (leaveDate as any instanceof Date) ?
                    (leaveDate as any).toISOString().substr(0,10) :
                    leaveDate;
            }

            if (leaveId !== undefined) {
                localVarQueryParameter['leaveId'] = leaveId;
            }

            if (leaveUserId !== undefined) {
                localVarQueryParameter['leaveUserId'] = leaveUserId;
            }

            if (ptoPolicyId !== undefined) {
                localVarQueryParameter['ptoPolicyId'] = ptoPolicyId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/leave/hours/credit',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process the leave of a user by leave Id
         * @param {number} leaveId The Id for the leave.
         * @param {'AP' | 'WA' | 'RJ' | 'PAP' | 'RCAL'} status The status of leave.   AP: Leave approved   WA: Leave is waiting for approval   RJ: Leave has been rejected   PAP: Leave is in a muti layer approval flow and has been partially approved   RCAL:  Leave was approved, taken, computed and then recalled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processLeaveById: async (leaveId: number, status: 'AP' | 'WA' | 'RJ' | 'PAP' | 'RCAL', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveId' is not null or undefined
            assertParamExists('processLeaveById', 'leaveId', leaveId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('processLeaveById', 'status', status)
            const localVarPath = `/api/process/leave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (leaveId !== undefined) {
                localVarQueryParameter['leaveId'] = leaveId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/process/leave',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeavesApi - functional programming interface
 * @export
 */
export const LeavesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeavesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add PTO balance.
         * @param {LeavesApiAddPtoBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPtoBalance(requestParameters: LeavesApiAddPtoBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const leavesAddPtoBalanceRequest: LeavesAddPtoBalanceRequest = {
                ptobalances: requestParameters.ptobalances
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPtoBalance(leavesAddPtoBalanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new leave.
         * @param {LeavesApiCreateNewLeaveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewLeave(requestParameters: LeavesApiCreateNewLeaveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const leaveModel: LeaveModel = {
                description: requestParameters.description,
                createUserViewModel: requestParameters.createUserViewModel,
                date: requestParameters.date,
                endDateMeridiem: requestParameters.endDateMeridiem,
                meridiem: requestParameters.meridiem,
                numberOfDays: requestParameters.numberOfDays,
                ptoPolicyModel: requestParameters.ptoPolicyModel,
                totalLeaveDays: requestParameters.totalLeaveDays,
                totalLeaveHours: requestParameters.totalLeaveHours,
                userModel: requestParameters.userModel
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewLeave(leaveModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve leave requests within a date range
         * @param {LeavesApiGetLeaveRequestsWithinDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaveRequestsWithinDateRange(requestParameters: LeavesApiGetLeaveRequestsWithinDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaveRequestsWithinDateRange(requestParameters.endDate, requestParameters.startDate, requestParameters.leaveUserid, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve leaves for approval/rejection by filtering on basis of Role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeavesBasedOnRole(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeavesBasedOnRole(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve remaining hours credit for leave policy
         * @param {LeavesApiGetRemainingHoursCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRemainingHoursCredit(requestParameters: LeavesApiGetRemainingHoursCreditRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRemainingHoursCredit(requestParameters.leaveDate, requestParameters.leaveId, requestParameters.leaveUserId, requestParameters.ptoPolicyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process the leave of a user by leave Id
         * @param {LeavesApiProcessLeaveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processLeaveById(requestParameters: LeavesApiProcessLeaveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processLeaveById(requestParameters.leaveId, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeavesApi - factory interface
 * @export
 */
export const LeavesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeavesApiFp(configuration)
    return {
        /**
         * 
         * @summary Add PTO balance.
         * @param {LeavesApiAddPtoBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPtoBalance(requestParameters: LeavesApiAddPtoBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.addPtoBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new leave.
         * @param {LeavesApiCreateNewLeaveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewLeave(requestParameters: LeavesApiCreateNewLeaveRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createNewLeave(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve leave requests within a date range
         * @param {LeavesApiGetLeaveRequestsWithinDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaveRequestsWithinDateRange(requestParameters: LeavesApiGetLeaveRequestsWithinDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getLeaveRequestsWithinDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve leaves for approval/rejection by filtering on basis of Role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeavesBasedOnRole(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getLeavesBasedOnRole(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve remaining hours credit for leave policy
         * @param {LeavesApiGetRemainingHoursCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemainingHoursCredit(requestParameters: LeavesApiGetRemainingHoursCreditRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getRemainingHoursCredit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process the leave of a user by leave Id
         * @param {LeavesApiProcessLeaveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processLeaveById(requestParameters: LeavesApiProcessLeaveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.processLeaveById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPtoBalance operation in LeavesApi.
 * @export
 * @interface LeavesApiAddPtoBalanceRequest
 */
export type LeavesApiAddPtoBalanceRequest = {
    
} & LeavesAddPtoBalanceRequest

/**
 * Request parameters for createNewLeave operation in LeavesApi.
 * @export
 * @interface LeavesApiCreateNewLeaveRequest
 */
export type LeavesApiCreateNewLeaveRequest = {
    
} & LeaveModel

/**
 * Request parameters for getLeaveRequestsWithinDateRange operation in LeavesApi.
 * @export
 * @interface LeavesApiGetLeaveRequestsWithinDateRangeRequest
 */
export type LeavesApiGetLeaveRequestsWithinDateRangeRequest = {
    
    /**
    * End date of the leave.
    * @type {string | Date}
    * @memberof LeavesApiGetLeaveRequestsWithinDateRange
    */
    readonly endDate: string | Date
    
    /**
    * Start date of the leave.
    * @type {string | Date}
    * @memberof LeavesApiGetLeaveRequestsWithinDateRange
    */
    readonly startDate: string | Date
    
    /**
    * The userId for that leave.
    * @type {number}
    * @memberof LeavesApiGetLeaveRequestsWithinDateRange
    */
    readonly leaveUserid?: number
    
    /**
    * The status of leave.   AP: Leave approved   WA: Leave is waiting for approval   RJ: Leave has been rejected   PAP: Leave is in a muti layer approval flow and has been partially approved   RCAL:  Leave was approved, taken, computed and then recalled 
    * @type {'AP' | 'WA' | 'RJ' | 'PAP' | 'RCAL'}
    * @memberof LeavesApiGetLeaveRequestsWithinDateRange
    */
    readonly status?: 'AP' | 'WA' | 'RJ' | 'PAP' | 'RCAL'
    
}

/**
 * Request parameters for getRemainingHoursCredit operation in LeavesApi.
 * @export
 * @interface LeavesApiGetRemainingHoursCreditRequest
 */
export type LeavesApiGetRemainingHoursCreditRequest = {
    
    /**
    * The date of the leave.
    * @type {string | Date}
    * @memberof LeavesApiGetRemainingHoursCredit
    */
    readonly leaveDate: string | Date
    
    /**
    * The Id of the leave.
    * @type {number}
    * @memberof LeavesApiGetRemainingHoursCredit
    */
    readonly leaveId: number
    
    /**
    * The userId for that leave.
    * @type {number}
    * @memberof LeavesApiGetRemainingHoursCredit
    */
    readonly leaveUserId: number
    
    /**
    * The Id of the ptoPolicy
    * @type {number}
    * @memberof LeavesApiGetRemainingHoursCredit
    */
    readonly ptoPolicyId: number
    
}

/**
 * Request parameters for processLeaveById operation in LeavesApi.
 * @export
 * @interface LeavesApiProcessLeaveByIdRequest
 */
export type LeavesApiProcessLeaveByIdRequest = {
    
    /**
    * The Id for the leave.
    * @type {number}
    * @memberof LeavesApiProcessLeaveById
    */
    readonly leaveId: number
    
    /**
    * The status of leave.   AP: Leave approved   WA: Leave is waiting for approval   RJ: Leave has been rejected   PAP: Leave is in a muti layer approval flow and has been partially approved   RCAL:  Leave was approved, taken, computed and then recalled 
    * @type {'AP' | 'WA' | 'RJ' | 'PAP' | 'RCAL'}
    * @memberof LeavesApiProcessLeaveById
    */
    readonly status: 'AP' | 'WA' | 'RJ' | 'PAP' | 'RCAL'
    
}

/**
 * LeavesApiGenerated - object-oriented interface
 * @export
 * @class LeavesApiGenerated
 * @extends {BaseAPI}
 */
export class LeavesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add PTO balance.
     * @param {LeavesApiAddPtoBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeavesApiGenerated
     */
    public addPtoBalance(requestParameters: LeavesApiAddPtoBalanceRequest, options?: AxiosRequestConfig) {
        return LeavesApiFp(this.configuration).addPtoBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new leave.
     * @param {LeavesApiCreateNewLeaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeavesApiGenerated
     */
    public createNewLeave(requestParameters: LeavesApiCreateNewLeaveRequest, options?: AxiosRequestConfig) {
        return LeavesApiFp(this.configuration).createNewLeave(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve leave requests within a date range
     * @param {LeavesApiGetLeaveRequestsWithinDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeavesApiGenerated
     */
    public getLeaveRequestsWithinDateRange(requestParameters: LeavesApiGetLeaveRequestsWithinDateRangeRequest, options?: AxiosRequestConfig) {
        return LeavesApiFp(this.configuration).getLeaveRequestsWithinDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve leaves for approval/rejection by filtering on basis of Role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeavesApiGenerated
     */
    public getLeavesBasedOnRole(options?: AxiosRequestConfig) {
        return LeavesApiFp(this.configuration).getLeavesBasedOnRole(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve remaining hours credit for leave policy
     * @param {LeavesApiGetRemainingHoursCreditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeavesApiGenerated
     */
    public getRemainingHoursCredit(requestParameters: LeavesApiGetRemainingHoursCreditRequest, options?: AxiosRequestConfig) {
        return LeavesApiFp(this.configuration).getRemainingHoursCredit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process the leave of a user by leave Id
     * @param {LeavesApiProcessLeaveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeavesApiGenerated
     */
    public processLeaveById(requestParameters: LeavesApiProcessLeaveByIdRequest, options?: AxiosRequestConfig) {
        return LeavesApiFp(this.configuration).processLeaveById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
