/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OrgRelationGetAllActive401Response } from '../models';
// @ts-ignore
import { OrgRelationGetAllActive409Response } from '../models';
// @ts-ignore
import { OrgRelationGetOrgRelationsByUser401Response } from '../models';
// @ts-ignore
import { OrgRelationGetOrgRelationsByUser409Response } from '../models';
// @ts-ignore
import { OrgRelationSaveUser401Response } from '../models';
// @ts-ignore
import { OrgRelationSaveUser409Response } from '../models';
// @ts-ignore
import { OrgRelationSaveUserResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrgRelationApi - axios parameter creator
 * @export
 */
export const OrgRelationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all active OrgRelations for entire organization.
         * @summary Retrieve all active OrgRelations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActive: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orgrelation/allactive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/orgrelation/allactive',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all the OrgRelations for the given user including Active, Archive and Future OrgRelations.
         * @summary Retrieve all the OrgRelations for the given user.
         * @param {string} email Email for which org relation will be fetched.
         * @param {number} [employeeUserId] User Id for which org relation will be fetched.
         * @param {string} [empId] Employee Id for which org relation will be fetched.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgRelationsByUser: async (email: string, employeeUserId?: number, empId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getOrgRelationsByUser', 'email', email)
            const localVarPath = `/api/orgrelation/orgRelationsByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (employeeUserId !== undefined) {
                localVarQueryParameter['employeeUserId'] = employeeUserId;
            }

            if (empId !== undefined) {
                localVarQueryParameter['empId'] = empId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/orgrelation/orgRelationsByUser',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Saves the OrgRelation for the User.
         * @summary Saves the OrgRelation for the User
         * @param {number} orgRelationId ID of OrgRelation for which data will be saved.
         * @param {number} managerUserId User Id of the manager.
         * @param {string} managerEmail Email of manager.
         * @param {string} [userEmail] User\&#39;s email.
         * @param {number} [otherUserId] User Id of the reporter.
         * @param {string} [relationType] Type of relation w.r.t manager.
         * @param {string | Date} [startDate] Date of start in that org unit.
         * @param {string | Date} [enddate] Ending date in that org unit.
         * @param {number} [cid] Company ID.
         * @param {string} [status] User is active or not active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUser: async (orgRelationId: number, managerUserId: number, managerEmail: string, userEmail?: string, otherUserId?: number, relationType?: string, startDate?: string | Date, enddate?: string | Date, cid?: number, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgRelationId' is not null or undefined
            assertParamExists('saveUser', 'orgRelationId', orgRelationId)
            // verify required parameter 'managerUserId' is not null or undefined
            assertParamExists('saveUser', 'managerUserId', managerUserId)
            // verify required parameter 'managerEmail' is not null or undefined
            assertParamExists('saveUser', 'managerEmail', managerEmail)
            const localVarPath = `/api/orgrelation/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (orgRelationId !== undefined) {
                localVarQueryParameter['orgRelationId'] = orgRelationId;
            }

            if (managerUserId !== undefined) {
                localVarQueryParameter['managerUserId'] = managerUserId;
            }

            if (managerEmail !== undefined) {
                localVarQueryParameter['managerEmail'] = managerEmail;
            }

            if (userEmail !== undefined) {
                localVarQueryParameter['userEmail'] = userEmail;
            }

            if (otherUserId !== undefined) {
                localVarQueryParameter['otherUserId'] = otherUserId;
            }

            if (relationType !== undefined) {
                localVarQueryParameter['relationType'] = relationType;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (enddate !== undefined) {
                localVarQueryParameter['enddate'] = (enddate as any instanceof Date) ?
                    (enddate as any).toISOString().substr(0,10) :
                    enddate;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/orgrelation/save',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgRelationApi - functional programming interface
 * @export
 */
export const OrgRelationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgRelationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all active OrgRelations for entire organization.
         * @summary Retrieve all active OrgRelations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllActive(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllActive(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all the OrgRelations for the given user including Active, Archive and Future OrgRelations.
         * @summary Retrieve all the OrgRelations for the given user.
         * @param {OrgRelationApiGetOrgRelationsByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgRelationsByUser(requestParameters: OrgRelationApiGetOrgRelationsByUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgRelationsByUser(requestParameters.email, requestParameters.employeeUserId, requestParameters.empId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Saves the OrgRelation for the User.
         * @summary Saves the OrgRelation for the User
         * @param {OrgRelationApiSaveUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUser(requestParameters: OrgRelationApiSaveUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgRelationSaveUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUser(requestParameters.orgRelationId, requestParameters.managerUserId, requestParameters.managerEmail, requestParameters.userEmail, requestParameters.otherUserId, requestParameters.relationType, requestParameters.startDate, requestParameters.enddate, requestParameters.cid, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgRelationApi - factory interface
 * @export
 */
export const OrgRelationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgRelationApiFp(configuration)
    return {
        /**
         * Retrieve all active OrgRelations for entire organization.
         * @summary Retrieve all active OrgRelations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActive(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getAllActive(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all the OrgRelations for the given user including Active, Archive and Future OrgRelations.
         * @summary Retrieve all the OrgRelations for the given user.
         * @param {OrgRelationApiGetOrgRelationsByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgRelationsByUser(requestParameters: OrgRelationApiGetOrgRelationsByUserRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getOrgRelationsByUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Saves the OrgRelation for the User.
         * @summary Saves the OrgRelation for the User
         * @param {OrgRelationApiSaveUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUser(requestParameters: OrgRelationApiSaveUserRequest, options?: AxiosRequestConfig): AxiosPromise<OrgRelationSaveUserResponse> {
            return localVarFp.saveUser(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOrgRelationsByUser operation in OrgRelationApi.
 * @export
 * @interface OrgRelationApiGetOrgRelationsByUserRequest
 */
export type OrgRelationApiGetOrgRelationsByUserRequest = {
    
    /**
    * Email for which org relation will be fetched.
    * @type {string}
    * @memberof OrgRelationApiGetOrgRelationsByUser
    */
    readonly email: string
    
    /**
    * User Id for which org relation will be fetched.
    * @type {number}
    * @memberof OrgRelationApiGetOrgRelationsByUser
    */
    readonly employeeUserId?: number
    
    /**
    * Employee Id for which org relation will be fetched.
    * @type {string}
    * @memberof OrgRelationApiGetOrgRelationsByUser
    */
    readonly empId?: string
    
}

/**
 * Request parameters for saveUser operation in OrgRelationApi.
 * @export
 * @interface OrgRelationApiSaveUserRequest
 */
export type OrgRelationApiSaveUserRequest = {
    
    /**
    * ID of OrgRelation for which data will be saved.
    * @type {number}
    * @memberof OrgRelationApiSaveUser
    */
    readonly orgRelationId: number
    
    /**
    * User Id of the manager.
    * @type {number}
    * @memberof OrgRelationApiSaveUser
    */
    readonly managerUserId: number
    
    /**
    * Email of manager.
    * @type {string}
    * @memberof OrgRelationApiSaveUser
    */
    readonly managerEmail: string
    
    /**
    * User\'s email.
    * @type {string}
    * @memberof OrgRelationApiSaveUser
    */
    readonly userEmail?: string
    
    /**
    * User Id of the reporter.
    * @type {number}
    * @memberof OrgRelationApiSaveUser
    */
    readonly otherUserId?: number
    
    /**
    * Type of relation w.r.t manager.
    * @type {string}
    * @memberof OrgRelationApiSaveUser
    */
    readonly relationType?: string
    
    /**
    * Date of start in that org unit.
    * @type {string | Date}
    * @memberof OrgRelationApiSaveUser
    */
    readonly startDate?: string | Date
    
    /**
    * Ending date in that org unit.
    * @type {string | Date}
    * @memberof OrgRelationApiSaveUser
    */
    readonly enddate?: string | Date
    
    /**
    * Company ID.
    * @type {number}
    * @memberof OrgRelationApiSaveUser
    */
    readonly cid?: number
    
    /**
    * User is active or not active.
    * @type {string}
    * @memberof OrgRelationApiSaveUser
    */
    readonly status?: string
    
}

/**
 * OrgRelationApiGenerated - object-oriented interface
 * @export
 * @class OrgRelationApiGenerated
 * @extends {BaseAPI}
 */
export class OrgRelationApiGenerated extends BaseAPI {
    /**
     * Retrieve all active OrgRelations for entire organization.
     * @summary Retrieve all active OrgRelations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgRelationApiGenerated
     */
    public getAllActive(options?: AxiosRequestConfig) {
        return OrgRelationApiFp(this.configuration).getAllActive(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all the OrgRelations for the given user including Active, Archive and Future OrgRelations.
     * @summary Retrieve all the OrgRelations for the given user.
     * @param {OrgRelationApiGetOrgRelationsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgRelationApiGenerated
     */
    public getOrgRelationsByUser(requestParameters: OrgRelationApiGetOrgRelationsByUserRequest, options?: AxiosRequestConfig) {
        return OrgRelationApiFp(this.configuration).getOrgRelationsByUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Saves the OrgRelation for the User.
     * @summary Saves the OrgRelation for the User
     * @param {OrgRelationApiSaveUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgRelationApiGenerated
     */
    public saveUser(requestParameters: OrgRelationApiSaveUserRequest, options?: AxiosRequestConfig) {
        return OrgRelationApiFp(this.configuration).saveUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
