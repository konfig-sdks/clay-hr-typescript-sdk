/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExpenseReportsCreateNewExpenseItemResponse } from '../models';
// @ts-ignore
import { ExpenseReportsCreateNewResponse } from '../models';
// @ts-ignore
import { ExpenseReportsDeleteExpenseReportResponse } from '../models';
// @ts-ignore
import { ExpenseReportsGetCurrenciesResponse } from '../models';
// @ts-ignore
import { ExpenseReportsSubmitExpenseReportResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExpenseReportsApi - axios parameter creator
 * @export
 */
export const ExpenseReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create expense report
         * @param {string} name Name of the expense report.
         * @param {number} amount Amount to be added in expense report.
         * @param {string} [description] Description of the expense report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (name: string, amount: number, description?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createNew', 'name', name)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createNew', 'amount', amount)
            const localVarPath = `/expensereport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/expensereport',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create expense item
         * @param {number} amount Amount of the expense item.
         * @param {'Y' | 'N'} billable Y for \&quot;Yes\&quot; and N for \&quot;No\&quot;.
         * @param {number} cid The unique ID of the customer.
         * @param {'$(USD)' | '$(CD)' | '₹(INR)'} currencyCode Code of the currency.
         * @param {string | Date} date Date of creating expense item.
         * @param {number} expenseItemId The ID of the expense item.
         * @param {string} expenseType The type of expense.
         * @param {number} expenseTypeId The ID of the expense type.
         * @param {number} projectId The ID of the project.
         * @param {'Y' | 'N'} reimbursible Y for \&quot;Yes\&quot; and N for \&quot;No\&quot;.
         * @param {string} remarks 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewExpenseItem: async (amount: number, billable: 'Y' | 'N', cid: number, currencyCode: '$(USD)' | '$(CD)' | '₹(INR)', date: string | Date, expenseItemId: number, expenseType: string, expenseTypeId: number, projectId: number, reimbursible: 'Y' | 'N', remarks: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createNewExpenseItem', 'amount', amount)
            // verify required parameter 'billable' is not null or undefined
            assertParamExists('createNewExpenseItem', 'billable', billable)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('createNewExpenseItem', 'cid', cid)
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('createNewExpenseItem', 'currencyCode', currencyCode)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('createNewExpenseItem', 'date', date)
            // verify required parameter 'expenseItemId' is not null or undefined
            assertParamExists('createNewExpenseItem', 'expenseItemId', expenseItemId)
            // verify required parameter 'expenseType' is not null or undefined
            assertParamExists('createNewExpenseItem', 'expenseType', expenseType)
            // verify required parameter 'expenseTypeId' is not null or undefined
            assertParamExists('createNewExpenseItem', 'expenseTypeId', expenseTypeId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createNewExpenseItem', 'projectId', projectId)
            // verify required parameter 'reimbursible' is not null or undefined
            assertParamExists('createNewExpenseItem', 'reimbursible', reimbursible)
            // verify required parameter 'remarks' is not null or undefined
            assertParamExists('createNewExpenseItem', 'remarks', remarks)
            const localVarPath = `/expenseitem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (billable !== undefined) {
                localVarQueryParameter['billable'] = billable;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }

            if (expenseItemId !== undefined) {
                localVarQueryParameter['expenseItemId'] = expenseItemId;
            }

            if (expenseType !== undefined) {
                localVarQueryParameter['expenseType'] = expenseType;
            }

            if (expenseTypeId !== undefined) {
                localVarQueryParameter['expenseTypeId'] = expenseTypeId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (reimbursible !== undefined) {
                localVarQueryParameter['reimbursible'] = reimbursible;
            }

            if (remarks !== undefined) {
                localVarQueryParameter['remarks'] = remarks;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/expenseitem',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete expense report
         * @param {number} expenseReportId The ID of the expense report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpenseReport: async (expenseReportId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseReportId' is not null or undefined
            assertParamExists('deleteExpenseReport', 'expenseReportId', expenseReportId)
            const localVarPath = `/expensereport/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (expenseReportId !== undefined) {
                localVarQueryParameter['expenseReportId'] = expenseReportId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/expensereport/delete',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve expense reports by User ID
         * @param {string} [guid] The unique system generated ID of the user.
         * @param {string} [email] Email of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUserId: async (guid?: string, email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expensereports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (guid !== undefined) {
                localVarQueryParameter['guid'] = guid;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/expensereports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrencies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/currencylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/currencylist',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve expense types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expensetypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/expensetypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the details of expense report
         * @param {number} [expenseReportId] The ID of the expense report.
         * @param {string} [guid] The unique system generated ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDetails: async (expenseReportId?: number, guid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expensereport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (expenseReportId !== undefined) {
                localVarQueryParameter['expenseReportId'] = expenseReportId;
            }

            if (guid !== undefined) {
                localVarQueryParameter['guid'] = guid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/expensereport',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit expense report
         * @param {number} expenseReportId The ID of the expense report.
         * @param {'DRFT' | 'SUB'} status Status of the expense report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitExpenseReport: async (expenseReportId: number, status: 'DRFT' | 'SUB', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseReportId' is not null or undefined
            assertParamExists('submitExpenseReport', 'expenseReportId', expenseReportId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('submitExpenseReport', 'status', status)
            const localVarPath = `/expensereport/submit/{expenseReportId}`
                .replace(`{${"expenseReportId"}}`, encodeURIComponent(String(expenseReportId !== undefined ? expenseReportId : `-expenseReportId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/expensereport/submit/{expenseReportId}',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpenseReportsApi - functional programming interface
 * @export
 */
export const ExpenseReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpenseReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create expense report
         * @param {ExpenseReportsApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: ExpenseReportsApiCreateNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseReportsCreateNewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(requestParameters.name, requestParameters.amount, requestParameters.description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create expense item
         * @param {ExpenseReportsApiCreateNewExpenseItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewExpenseItem(requestParameters: ExpenseReportsApiCreateNewExpenseItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseReportsCreateNewExpenseItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewExpenseItem(requestParameters.amount, requestParameters.billable, requestParameters.cid, requestParameters.currencyCode, requestParameters.date, requestParameters.expenseItemId, requestParameters.expenseType, requestParameters.expenseTypeId, requestParameters.projectId, requestParameters.reimbursible, requestParameters.remarks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete expense report
         * @param {ExpenseReportsApiDeleteExpenseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExpenseReport(requestParameters: ExpenseReportsApiDeleteExpenseReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseReportsDeleteExpenseReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExpenseReport(requestParameters.expenseReportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve expense reports by User ID
         * @param {ExpenseReportsApiGetByUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByUserId(requestParameters: ExpenseReportsApiGetByUserIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByUserId(requestParameters.guid, requestParameters.email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrencies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseReportsGetCurrenciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrencies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve expense types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpenseTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpenseTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve the details of expense report
         * @param {ExpenseReportsApiGetReportDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportDetails(requestParameters: ExpenseReportsApiGetReportDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportDetails(requestParameters.expenseReportId, requestParameters.guid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submit expense report
         * @param {ExpenseReportsApiSubmitExpenseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitExpenseReport(requestParameters: ExpenseReportsApiSubmitExpenseReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseReportsSubmitExpenseReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitExpenseReport(requestParameters.expenseReportId, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExpenseReportsApi - factory interface
 * @export
 */
export const ExpenseReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpenseReportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create expense report
         * @param {ExpenseReportsApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: ExpenseReportsApiCreateNewRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseReportsCreateNewResponse> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create expense item
         * @param {ExpenseReportsApiCreateNewExpenseItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewExpenseItem(requestParameters: ExpenseReportsApiCreateNewExpenseItemRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseReportsCreateNewExpenseItemResponse> {
            return localVarFp.createNewExpenseItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete expense report
         * @param {ExpenseReportsApiDeleteExpenseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpenseReport(requestParameters: ExpenseReportsApiDeleteExpenseReportRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseReportsDeleteExpenseReportResponse> {
            return localVarFp.deleteExpenseReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve expense reports by User ID
         * @param {ExpenseReportsApiGetByUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUserId(requestParameters: ExpenseReportsApiGetByUserIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getByUserId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrencies(options?: AxiosRequestConfig): AxiosPromise<ExpenseReportsGetCurrenciesResponse> {
            return localVarFp.getCurrencies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve expense types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseTypes(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getExpenseTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the details of expense report
         * @param {ExpenseReportsApiGetReportDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDetails(requestParameters: ExpenseReportsApiGetReportDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getReportDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit expense report
         * @param {ExpenseReportsApiSubmitExpenseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitExpenseReport(requestParameters: ExpenseReportsApiSubmitExpenseReportRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseReportsSubmitExpenseReportResponse> {
            return localVarFp.submitExpenseReport(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNew operation in ExpenseReportsApi.
 * @export
 * @interface ExpenseReportsApiCreateNewRequest
 */
export type ExpenseReportsApiCreateNewRequest = {
    
    /**
    * Name of the expense report.
    * @type {string}
    * @memberof ExpenseReportsApiCreateNew
    */
    readonly name: string
    
    /**
    * Amount to be added in expense report.
    * @type {number}
    * @memberof ExpenseReportsApiCreateNew
    */
    readonly amount: number
    
    /**
    * Description of the expense report.
    * @type {string}
    * @memberof ExpenseReportsApiCreateNew
    */
    readonly description?: string
    
}

/**
 * Request parameters for createNewExpenseItem operation in ExpenseReportsApi.
 * @export
 * @interface ExpenseReportsApiCreateNewExpenseItemRequest
 */
export type ExpenseReportsApiCreateNewExpenseItemRequest = {
    
    /**
    * Amount of the expense item.
    * @type {number}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly amount: number
    
    /**
    * Y for \"Yes\" and N for \"No\".
    * @type {'Y' | 'N'}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly billable: 'Y' | 'N'
    
    /**
    * The unique ID of the customer.
    * @type {number}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly cid: number
    
    /**
    * Code of the currency.
    * @type {'$(USD)' | '$(CD)' | '₹(INR)'}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly currencyCode: '$(USD)' | '$(CD)' | '₹(INR)'
    
    /**
    * Date of creating expense item.
    * @type {string | Date}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly date: string | Date
    
    /**
    * The ID of the expense item.
    * @type {number}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly expenseItemId: number
    
    /**
    * The type of expense.
    * @type {string}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly expenseType: string
    
    /**
    * The ID of the expense type.
    * @type {number}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly expenseTypeId: number
    
    /**
    * The ID of the project.
    * @type {number}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly projectId: number
    
    /**
    * Y for \"Yes\" and N for \"No\".
    * @type {'Y' | 'N'}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly reimbursible: 'Y' | 'N'
    
    /**
    * 
    * @type {string}
    * @memberof ExpenseReportsApiCreateNewExpenseItem
    */
    readonly remarks: string
    
}

/**
 * Request parameters for deleteExpenseReport operation in ExpenseReportsApi.
 * @export
 * @interface ExpenseReportsApiDeleteExpenseReportRequest
 */
export type ExpenseReportsApiDeleteExpenseReportRequest = {
    
    /**
    * The ID of the expense report.
    * @type {number}
    * @memberof ExpenseReportsApiDeleteExpenseReport
    */
    readonly expenseReportId: number
    
}

/**
 * Request parameters for getByUserId operation in ExpenseReportsApi.
 * @export
 * @interface ExpenseReportsApiGetByUserIdRequest
 */
export type ExpenseReportsApiGetByUserIdRequest = {
    
    /**
    * The unique system generated ID of the user.
    * @type {string}
    * @memberof ExpenseReportsApiGetByUserId
    */
    readonly guid?: string
    
    /**
    * Email of the user.
    * @type {string}
    * @memberof ExpenseReportsApiGetByUserId
    */
    readonly email?: string
    
}

/**
 * Request parameters for getReportDetails operation in ExpenseReportsApi.
 * @export
 * @interface ExpenseReportsApiGetReportDetailsRequest
 */
export type ExpenseReportsApiGetReportDetailsRequest = {
    
    /**
    * The ID of the expense report.
    * @type {number}
    * @memberof ExpenseReportsApiGetReportDetails
    */
    readonly expenseReportId?: number
    
    /**
    * The unique system generated ID of the user.
    * @type {string}
    * @memberof ExpenseReportsApiGetReportDetails
    */
    readonly guid?: string
    
}

/**
 * Request parameters for submitExpenseReport operation in ExpenseReportsApi.
 * @export
 * @interface ExpenseReportsApiSubmitExpenseReportRequest
 */
export type ExpenseReportsApiSubmitExpenseReportRequest = {
    
    /**
    * The ID of the expense report.
    * @type {number}
    * @memberof ExpenseReportsApiSubmitExpenseReport
    */
    readonly expenseReportId: number
    
    /**
    * Status of the expense report.
    * @type {'DRFT' | 'SUB'}
    * @memberof ExpenseReportsApiSubmitExpenseReport
    */
    readonly status: 'DRFT' | 'SUB'
    
}

/**
 * ExpenseReportsApiGenerated - object-oriented interface
 * @export
 * @class ExpenseReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ExpenseReportsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create expense report
     * @param {ExpenseReportsApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportsApiGenerated
     */
    public createNew(requestParameters: ExpenseReportsApiCreateNewRequest, options?: AxiosRequestConfig) {
        return ExpenseReportsApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create expense item
     * @param {ExpenseReportsApiCreateNewExpenseItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportsApiGenerated
     */
    public createNewExpenseItem(requestParameters: ExpenseReportsApiCreateNewExpenseItemRequest, options?: AxiosRequestConfig) {
        return ExpenseReportsApiFp(this.configuration).createNewExpenseItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete expense report
     * @param {ExpenseReportsApiDeleteExpenseReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportsApiGenerated
     */
    public deleteExpenseReport(requestParameters: ExpenseReportsApiDeleteExpenseReportRequest, options?: AxiosRequestConfig) {
        return ExpenseReportsApiFp(this.configuration).deleteExpenseReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve expense reports by User ID
     * @param {ExpenseReportsApiGetByUserIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportsApiGenerated
     */
    public getByUserId(requestParameters: ExpenseReportsApiGetByUserIdRequest = {}, options?: AxiosRequestConfig) {
        return ExpenseReportsApiFp(this.configuration).getByUserId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportsApiGenerated
     */
    public getCurrencies(options?: AxiosRequestConfig) {
        return ExpenseReportsApiFp(this.configuration).getCurrencies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve expense types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportsApiGenerated
     */
    public getExpenseTypes(options?: AxiosRequestConfig) {
        return ExpenseReportsApiFp(this.configuration).getExpenseTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the details of expense report
     * @param {ExpenseReportsApiGetReportDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportsApiGenerated
     */
    public getReportDetails(requestParameters: ExpenseReportsApiGetReportDetailsRequest = {}, options?: AxiosRequestConfig) {
        return ExpenseReportsApiFp(this.configuration).getReportDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit expense report
     * @param {ExpenseReportsApiSubmitExpenseReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportsApiGenerated
     */
    public submitExpenseReport(requestParameters: ExpenseReportsApiSubmitExpenseReportRequest, options?: AxiosRequestConfig) {
        return ExpenseReportsApiFp(this.configuration).submitExpenseReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
