/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TaskModel } from '../models';
// @ts-ignore
import { WorkflowsCreateNewTask409Response } from '../models';
// @ts-ignore
import { WorkflowsCreateNewTaskResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export const WorkflowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new task.
         * @param {Array<TaskModel>} taskModel task object to create a new task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTask: async (taskModel: Array<TaskModel>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskModel' is not null or undefined
            assertParamExists('createNewTask', 'taskModel', taskModel)
            const localVarPath = `/api/v3/task/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: taskModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/task/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(taskModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the details of a workflow task by task id.
         * @param {number} taskid taskid
         * @param {string} [authorization] Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskDetailsByTaskId: async (taskid: number, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskid' is not null or undefined
            assertParamExists('getTaskDetailsByTaskId', 'taskid', taskid)
            const localVarPath = `/api/v3/task/{taskid}`
                .replace(`{${"taskid"}}`, encodeURIComponent(String(taskid !== undefined ? taskid : `-taskid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/task/{taskid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tasks by user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksByUserId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get workflows by user id.
         * @param {string} [authorization] Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWorkflows: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/userworkflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/userworkflows',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get workflows.
         * @param {string} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflows: async (status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/workflows',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tasks by userworkflowid.
         * @param {number} userworkflowid userworkflowid
         * @param {string} [authorization] Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasksByUserworkflowId: async (userworkflowid: number, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userworkflowid' is not null or undefined
            assertParamExists('listTasksByUserworkflowId', 'userworkflowid', userworkflowid)
            const localVarPath = `/api/v3/userworkflows/{userworkflowid}`
                .replace(`{${"userworkflowid"}}`, encodeURIComponent(String(userworkflowid !== undefined ? userworkflowid : `-userworkflowid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/userworkflows/{userworkflowid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update status workflow task.
         * @param {string} [authorization] Authorization
         * @param {number} [appraisalId] 
         * @param {number} [assignedUserId] 
         * @param {boolean} [ci] 
         * @param {number} [cid] 
         * @param {number} [createUserId] 
         * @param {string | Date} [createts] 
         * @param {string} [description] 
         * @param {string | Date} [dueDate] 
         * @param {string} [lastEdit] 
         * @param {number} [launchtsDate] 
         * @param {number} [launchtsDay] 
         * @param {number} [launchtsHours] 
         * @param {number} [launchtsMinutes] 
         * @param {number} [launchtsMonth] 
         * @param {number} [launchtsNanos] 
         * @param {number} [launchtsSeconds] 
         * @param {number} [launchtsTime] 
         * @param {number} [launchtsTimezoneOffset] 
         * @param {number} [launchtsYear] 
         * @param {string} [phasename] 
         * @param {number} [projectId] 
         * @param {number} [recruitId] 
         * @param {string} [statusCode] 
         * @param {number} [systemTask] 
         * @param {number} [taskId] 
         * @param {number} [taskUID] 
         * @param {string} [title] 
         * @param {string} [transitionName] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusTask: async (authorization?: string, appraisalId?: number, assignedUserId?: number, ci?: boolean, cid?: number, createUserId?: number, createts?: string | Date, description?: string, dueDate?: string | Date, lastEdit?: string, launchtsDate?: number, launchtsDay?: number, launchtsHours?: number, launchtsMinutes?: number, launchtsMonth?: number, launchtsNanos?: number, launchtsSeconds?: number, launchtsTime?: number, launchtsTimezoneOffset?: number, launchtsYear?: number, phasename?: string, projectId?: number, recruitId?: number, statusCode?: string, systemTask?: number, taskId?: number, taskUID?: number, title?: string, transitionName?: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/task/update/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            if (appraisalId !== undefined) {
                localVarQueryParameter['appraisalId'] = appraisalId;
            }

            if (assignedUserId !== undefined) {
                localVarQueryParameter['assignedUserId'] = assignedUserId;
            }

            if (ci !== undefined) {
                localVarQueryParameter['ci'] = ci;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (createts !== undefined) {
                localVarQueryParameter['createts'] = (createts as any instanceof Date) ?
                    (createts as any).toISOString().substr(0,10) :
                    createts;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (dueDate !== undefined) {
                localVarQueryParameter['dueDate'] = (dueDate as any instanceof Date) ?
                    (dueDate as any).toISOString().substr(0,10) :
                    dueDate;
            }

            if (lastEdit !== undefined) {
                localVarQueryParameter['lastEdit'] = lastEdit;
            }

            if (launchtsDate !== undefined) {
                localVarQueryParameter['launchts.date'] = launchtsDate;
            }

            if (launchtsDay !== undefined) {
                localVarQueryParameter['launchts.day'] = launchtsDay;
            }

            if (launchtsHours !== undefined) {
                localVarQueryParameter['launchts.hours'] = launchtsHours;
            }

            if (launchtsMinutes !== undefined) {
                localVarQueryParameter['launchts.minutes'] = launchtsMinutes;
            }

            if (launchtsMonth !== undefined) {
                localVarQueryParameter['launchts.month'] = launchtsMonth;
            }

            if (launchtsNanos !== undefined) {
                localVarQueryParameter['launchts.nanos'] = launchtsNanos;
            }

            if (launchtsSeconds !== undefined) {
                localVarQueryParameter['launchts.seconds'] = launchtsSeconds;
            }

            if (launchtsTime !== undefined) {
                localVarQueryParameter['launchts.time'] = launchtsTime;
            }

            if (launchtsTimezoneOffset !== undefined) {
                localVarQueryParameter['launchts.timezoneOffset'] = launchtsTimezoneOffset;
            }

            if (launchtsYear !== undefined) {
                localVarQueryParameter['launchts.year'] = launchtsYear;
            }

            if (phasename !== undefined) {
                localVarQueryParameter['phasename'] = phasename;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (recruitId !== undefined) {
                localVarQueryParameter['recruitId'] = recruitId;
            }

            if (statusCode !== undefined) {
                localVarQueryParameter['statusCode'] = statusCode;
            }

            if (systemTask !== undefined) {
                localVarQueryParameter['systemTask'] = systemTask;
            }

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (taskUID !== undefined) {
                localVarQueryParameter['taskUID'] = taskUID;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (transitionName !== undefined) {
                localVarQueryParameter['transitionName'] = transitionName;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/task/update/status',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export const WorkflowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new task.
         * @param {WorkflowsApiCreateNewTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTask(requestParameters: WorkflowsApiCreateNewTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const taskModel: Array<TaskModel> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTask(taskModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the details of a workflow task by task id.
         * @param {WorkflowsApiGetTaskDetailsByTaskIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskDetailsByTaskId(requestParameters: WorkflowsApiGetTaskDetailsByTaskIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskDetailsByTaskId(requestParameters.taskid, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get tasks by user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasksByUserId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasksByUserId(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get workflows by user id.
         * @param {WorkflowsApiGetUserWorkflowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserWorkflows(requestParameters: WorkflowsApiGetUserWorkflowsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserWorkflows(requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get workflows.
         * @param {WorkflowsApiGetWorkflowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflows(requestParameters: WorkflowsApiGetWorkflowsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflows(requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get tasks by userworkflowid.
         * @param {WorkflowsApiListTasksByUserworkflowIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasksByUserworkflowId(requestParameters: WorkflowsApiListTasksByUserworkflowIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTasksByUserworkflowId(requestParameters.userworkflowid, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update status workflow task.
         * @param {WorkflowsApiUpdateStatusTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatusTask(requestParameters: WorkflowsApiUpdateStatusTaskRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatusTask(requestParameters.authorization, requestParameters.appraisalId, requestParameters.assignedUserId, requestParameters.ci, requestParameters.cid, requestParameters.createUserId, requestParameters.createts, requestParameters.description, requestParameters.dueDate, requestParameters.lastEdit, requestParameters.launchtsDate, requestParameters.launchtsDay, requestParameters.launchtsHours, requestParameters.launchtsMinutes, requestParameters.launchtsMonth, requestParameters.launchtsNanos, requestParameters.launchtsSeconds, requestParameters.launchtsTime, requestParameters.launchtsTimezoneOffset, requestParameters.launchtsYear, requestParameters.phasename, requestParameters.projectId, requestParameters.recruitId, requestParameters.statusCode, requestParameters.systemTask, requestParameters.taskId, requestParameters.taskUID, requestParameters.title, requestParameters.transitionName, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkflowsApi - factory interface
 * @export
 */
export const WorkflowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new task.
         * @param {WorkflowsApiCreateNewTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTask(requestParameters: WorkflowsApiCreateNewTaskRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createNewTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the details of a workflow task by task id.
         * @param {WorkflowsApiGetTaskDetailsByTaskIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskDetailsByTaskId(requestParameters: WorkflowsApiGetTaskDetailsByTaskIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTaskDetailsByTaskId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tasks by user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksByUserId(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTasksByUserId(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get workflows by user id.
         * @param {WorkflowsApiGetUserWorkflowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWorkflows(requestParameters: WorkflowsApiGetUserWorkflowsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUserWorkflows(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get workflows.
         * @param {WorkflowsApiGetWorkflowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflows(requestParameters: WorkflowsApiGetWorkflowsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getWorkflows(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tasks by userworkflowid.
         * @param {WorkflowsApiListTasksByUserworkflowIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasksByUserworkflowId(requestParameters: WorkflowsApiListTasksByUserworkflowIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listTasksByUserworkflowId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update status workflow task.
         * @param {WorkflowsApiUpdateStatusTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusTask(requestParameters: WorkflowsApiUpdateStatusTaskRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateStatusTask(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewTask operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiCreateNewTaskRequest
 */
export type WorkflowsApiCreateNewTaskRequest = Array<TaskModel>

/**
 * Request parameters for getTaskDetailsByTaskId operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiGetTaskDetailsByTaskIdRequest
 */
export type WorkflowsApiGetTaskDetailsByTaskIdRequest = {
    
    /**
    * taskid
    * @type {number}
    * @memberof WorkflowsApiGetTaskDetailsByTaskId
    */
    readonly taskid: number
    
    /**
    * Authorization
    * @type {string}
    * @memberof WorkflowsApiGetTaskDetailsByTaskId
    */
    readonly authorization?: string
    
}

/**
 * Request parameters for getUserWorkflows operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiGetUserWorkflowsRequest
 */
export type WorkflowsApiGetUserWorkflowsRequest = {
    
    /**
    * Authorization
    * @type {string}
    * @memberof WorkflowsApiGetUserWorkflows
    */
    readonly authorization?: string
    
}

/**
 * Request parameters for getWorkflows operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiGetWorkflowsRequest
 */
export type WorkflowsApiGetWorkflowsRequest = {
    
    /**
    * status
    * @type {string}
    * @memberof WorkflowsApiGetWorkflows
    */
    readonly status?: string
    
}

/**
 * Request parameters for listTasksByUserworkflowId operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiListTasksByUserworkflowIdRequest
 */
export type WorkflowsApiListTasksByUserworkflowIdRequest = {
    
    /**
    * userworkflowid
    * @type {number}
    * @memberof WorkflowsApiListTasksByUserworkflowId
    */
    readonly userworkflowid: number
    
    /**
    * Authorization
    * @type {string}
    * @memberof WorkflowsApiListTasksByUserworkflowId
    */
    readonly authorization?: string
    
}

/**
 * Request parameters for updateStatusTask operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiUpdateStatusTaskRequest
 */
export type WorkflowsApiUpdateStatusTaskRequest = {
    
    /**
    * Authorization
    * @type {string}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly authorization?: string
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly appraisalId?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly assignedUserId?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly ci?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly cid?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly createUserId?: number
    
    /**
    * 
    * @type {string | Date}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly createts?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly description?: string
    
    /**
    * 
    * @type {string | Date}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly dueDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly lastEdit?: string
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsDate?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsDay?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsHours?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsMinutes?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsMonth?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsNanos?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsSeconds?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsTime?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsTimezoneOffset?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly launchtsYear?: number
    
    /**
    * 
    * @type {string}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly phasename?: string
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly projectId?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly recruitId?: number
    
    /**
    * 
    * @type {string}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly statusCode?: string
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly systemTask?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly taskId?: number
    
    /**
    * 
    * @type {number}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly taskUID?: number
    
    /**
    * 
    * @type {string}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly title?: string
    
    /**
    * 
    * @type {string}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly transitionName?: string
    
    /**
    * 
    * @type {string}
    * @memberof WorkflowsApiUpdateStatusTask
    */
    readonly type?: string
    
}

/**
 * WorkflowsApiGenerated - object-oriented interface
 * @export
 * @class WorkflowsApiGenerated
 * @extends {BaseAPI}
 */
export class WorkflowsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a new task.
     * @param {WorkflowsApiCreateNewTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public createNewTask(requestParameters: WorkflowsApiCreateNewTaskRequest, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).createNewTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the details of a workflow task by task id.
     * @param {WorkflowsApiGetTaskDetailsByTaskIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public getTaskDetailsByTaskId(requestParameters: WorkflowsApiGetTaskDetailsByTaskIdRequest, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).getTaskDetailsByTaskId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tasks by user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public getTasksByUserId(options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).getTasksByUserId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get workflows by user id.
     * @param {WorkflowsApiGetUserWorkflowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public getUserWorkflows(requestParameters: WorkflowsApiGetUserWorkflowsRequest = {}, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).getUserWorkflows(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get workflows.
     * @param {WorkflowsApiGetWorkflowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public getWorkflows(requestParameters: WorkflowsApiGetWorkflowsRequest = {}, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).getWorkflows(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tasks by userworkflowid.
     * @param {WorkflowsApiListTasksByUserworkflowIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public listTasksByUserworkflowId(requestParameters: WorkflowsApiListTasksByUserworkflowIdRequest, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).listTasksByUserworkflowId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update status workflow task.
     * @param {WorkflowsApiUpdateStatusTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public updateStatusTask(requestParameters: WorkflowsApiUpdateStatusTaskRequest = {}, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).updateStatusTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
