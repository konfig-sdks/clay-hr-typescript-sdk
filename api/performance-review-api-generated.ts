/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PerformanceReviewCreatePerformanceReview409Response } from '../models';
// @ts-ignore
import { PerformanceReviewCreatePerformanceReviewResponse } from '../models';
// @ts-ignore
import { PerformanceReviewGetCompletedReviewsBasedOnUserId409Response } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PerformanceReviewApi - axios parameter creator
 * @export
 */
export const PerformanceReviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Performance Review
         * @param {number} templateId The ID of the performance review template.
         * @param {string | Date} [startDate] Start Date of the performance review.
         * @param {string | Date} [endDate] End Date of the performance review.
         * @param {'Annual' | 'Mid-Year' | 'Quarterly' | 'Probation' | 'Other'} [appraisalType] Review Period
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerformanceReview: async (templateId: number, startDate?: string | Date, endDate?: string | Date, appraisalType?: 'Annual' | 'Mid-Year' | 'Quarterly' | 'Probation' | 'Other', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('createPerformanceReview', 'templateId', templateId)
            const localVarPath = `/appraisal/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (templateId !== undefined) {
                localVarQueryParameter['templateId'] = templateId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (appraisalType !== undefined) {
                localVarQueryParameter['AppraisalType'] = appraisalType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/appraisal/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Completed Performance Reviews
         * @param {number} targetUserId The ID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedReviewsBasedOnUserId: async (targetUserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetUserId' is not null or undefined
            assertParamExists('getCompletedReviewsBasedOnUserId', 'targetUserId', targetUserId)
            const localVarPath = `/appraisal/getCompletedReviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (targetUserId !== undefined) {
                localVarQueryParameter['targetUserId'] = targetUserId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/appraisal/getCompletedReviews',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Performance Reviews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerformanceReviews: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/appraisal/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/appraisal/user',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Performance Review Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplates: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/appraisal/template/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/appraisal/template/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Launch Performance Reviews In Bulk
         * @param {string} [templateId] 
         * @param {string} [reviewType] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [importGoals] 
         * @param {string} [importJobProfileSkills] 
         * @param {string} [importSkills] 
         * @param {string} [userIdList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchPerformanceReviewsInBulk: async (templateId?: string, reviewType?: string, startDate?: string, endDate?: string, importGoals?: string, importJobProfileSkills?: string, importSkills?: string, userIdList?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/appraisal/bulkLaunch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (templateId !== undefined) {
                localVarQueryParameter['templateId'] = templateId;
            }

            if (reviewType !== undefined) {
                localVarQueryParameter['reviewType'] = reviewType;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (importGoals !== undefined) {
                localVarQueryParameter['importGoals'] = importGoals;
            }

            if (importJobProfileSkills !== undefined) {
                localVarQueryParameter['importJobProfileSkills'] = importJobProfileSkills;
            }

            if (importSkills !== undefined) {
                localVarQueryParameter['importSkills'] = importSkills;
            }

            if (userIdList !== undefined) {
                localVarQueryParameter['userIdList'] = userIdList;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/appraisal/bulkLaunch',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PerformanceReviewApi - functional programming interface
 * @export
 */
export const PerformanceReviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PerformanceReviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Performance Review
         * @param {PerformanceReviewApiCreatePerformanceReviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPerformanceReview(requestParameters: PerformanceReviewApiCreatePerformanceReviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerformanceReviewCreatePerformanceReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPerformanceReview(requestParameters.templateId, requestParameters.startDate, requestParameters.endDate, requestParameters.appraisalType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Completed Performance Reviews
         * @param {PerformanceReviewApiGetCompletedReviewsBasedOnUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompletedReviewsBasedOnUserId(requestParameters: PerformanceReviewApiGetCompletedReviewsBasedOnUserIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompletedReviewsBasedOnUserId(requestParameters.targetUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Performance Reviews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPerformanceReviews(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPerformanceReviews(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Performance Review Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplates(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Launch Performance Reviews In Bulk
         * @param {PerformanceReviewApiLaunchPerformanceReviewsInBulkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async launchPerformanceReviewsInBulk(requestParameters: PerformanceReviewApiLaunchPerformanceReviewsInBulkRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.launchPerformanceReviewsInBulk(requestParameters.templateId, requestParameters.reviewType, requestParameters.startDate, requestParameters.endDate, requestParameters.importGoals, requestParameters.importJobProfileSkills, requestParameters.importSkills, requestParameters.userIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PerformanceReviewApi - factory interface
 * @export
 */
export const PerformanceReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PerformanceReviewApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Performance Review
         * @param {PerformanceReviewApiCreatePerformanceReviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerformanceReview(requestParameters: PerformanceReviewApiCreatePerformanceReviewRequest, options?: AxiosRequestConfig): AxiosPromise<PerformanceReviewCreatePerformanceReviewResponse> {
            return localVarFp.createPerformanceReview(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Completed Performance Reviews
         * @param {PerformanceReviewApiGetCompletedReviewsBasedOnUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedReviewsBasedOnUserId(requestParameters: PerformanceReviewApiGetCompletedReviewsBasedOnUserIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getCompletedReviewsBasedOnUserId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Performance Reviews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerformanceReviews(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getPerformanceReviews(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Performance Review Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplates(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTemplates(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Launch Performance Reviews In Bulk
         * @param {PerformanceReviewApiLaunchPerformanceReviewsInBulkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launchPerformanceReviewsInBulk(requestParameters: PerformanceReviewApiLaunchPerformanceReviewsInBulkRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.launchPerformanceReviewsInBulk(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPerformanceReview operation in PerformanceReviewApi.
 * @export
 * @interface PerformanceReviewApiCreatePerformanceReviewRequest
 */
export type PerformanceReviewApiCreatePerformanceReviewRequest = {
    
    /**
    * The ID of the performance review template.
    * @type {number}
    * @memberof PerformanceReviewApiCreatePerformanceReview
    */
    readonly templateId: number
    
    /**
    * Start Date of the performance review.
    * @type {string | Date}
    * @memberof PerformanceReviewApiCreatePerformanceReview
    */
    readonly startDate?: string | Date
    
    /**
    * End Date of the performance review.
    * @type {string | Date}
    * @memberof PerformanceReviewApiCreatePerformanceReview
    */
    readonly endDate?: string | Date
    
    /**
    * Review Period
    * @type {'Annual' | 'Mid-Year' | 'Quarterly' | 'Probation' | 'Other'}
    * @memberof PerformanceReviewApiCreatePerformanceReview
    */
    readonly appraisalType?: 'Annual' | 'Mid-Year' | 'Quarterly' | 'Probation' | 'Other'
    
}

/**
 * Request parameters for getCompletedReviewsBasedOnUserId operation in PerformanceReviewApi.
 * @export
 * @interface PerformanceReviewApiGetCompletedReviewsBasedOnUserIdRequest
 */
export type PerformanceReviewApiGetCompletedReviewsBasedOnUserIdRequest = {
    
    /**
    * The ID of the user.
    * @type {number}
    * @memberof PerformanceReviewApiGetCompletedReviewsBasedOnUserId
    */
    readonly targetUserId: number
    
}

/**
 * Request parameters for launchPerformanceReviewsInBulk operation in PerformanceReviewApi.
 * @export
 * @interface PerformanceReviewApiLaunchPerformanceReviewsInBulkRequest
 */
export type PerformanceReviewApiLaunchPerformanceReviewsInBulkRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PerformanceReviewApiLaunchPerformanceReviewsInBulk
    */
    readonly templateId?: string
    
    /**
    * 
    * @type {string}
    * @memberof PerformanceReviewApiLaunchPerformanceReviewsInBulk
    */
    readonly reviewType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PerformanceReviewApiLaunchPerformanceReviewsInBulk
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof PerformanceReviewApiLaunchPerformanceReviewsInBulk
    */
    readonly endDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof PerformanceReviewApiLaunchPerformanceReviewsInBulk
    */
    readonly importGoals?: string
    
    /**
    * 
    * @type {string}
    * @memberof PerformanceReviewApiLaunchPerformanceReviewsInBulk
    */
    readonly importJobProfileSkills?: string
    
    /**
    * 
    * @type {string}
    * @memberof PerformanceReviewApiLaunchPerformanceReviewsInBulk
    */
    readonly importSkills?: string
    
    /**
    * 
    * @type {string}
    * @memberof PerformanceReviewApiLaunchPerformanceReviewsInBulk
    */
    readonly userIdList?: string
    
}

/**
 * PerformanceReviewApiGenerated - object-oriented interface
 * @export
 * @class PerformanceReviewApiGenerated
 * @extends {BaseAPI}
 */
export class PerformanceReviewApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Performance Review
     * @param {PerformanceReviewApiCreatePerformanceReviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceReviewApiGenerated
     */
    public createPerformanceReview(requestParameters: PerformanceReviewApiCreatePerformanceReviewRequest, options?: AxiosRequestConfig) {
        return PerformanceReviewApiFp(this.configuration).createPerformanceReview(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Completed Performance Reviews
     * @param {PerformanceReviewApiGetCompletedReviewsBasedOnUserIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceReviewApiGenerated
     */
    public getCompletedReviewsBasedOnUserId(requestParameters: PerformanceReviewApiGetCompletedReviewsBasedOnUserIdRequest, options?: AxiosRequestConfig) {
        return PerformanceReviewApiFp(this.configuration).getCompletedReviewsBasedOnUserId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Performance Reviews
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceReviewApiGenerated
     */
    public getPerformanceReviews(options?: AxiosRequestConfig) {
        return PerformanceReviewApiFp(this.configuration).getPerformanceReviews(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Performance Review Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceReviewApiGenerated
     */
    public getTemplates(options?: AxiosRequestConfig) {
        return PerformanceReviewApiFp(this.configuration).getTemplates(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Launch Performance Reviews In Bulk
     * @param {PerformanceReviewApiLaunchPerformanceReviewsInBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerformanceReviewApiGenerated
     */
    public launchPerformanceReviewsInBulk(requestParameters: PerformanceReviewApiLaunchPerformanceReviewsInBulkRequest = {}, options?: AxiosRequestConfig) {
        return PerformanceReviewApiFp(this.configuration).launchPerformanceReviewsInBulk(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
