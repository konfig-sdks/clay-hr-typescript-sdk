/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FormsApi - axios parameter creator
 * @export
 */
export const FormsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve completed forms assigned to me  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignedForms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/my',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve form details
         * @param {number} dynamicFormId The ID of Form.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (dynamicFormId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dynamicFormId' is not null or undefined
            assertParamExists('getDetails', 'dynamicFormId', dynamicFormId)
            const localVarPath = `/api/view`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (dynamicFormId !== undefined) {
                localVarQueryParameter['dynamicFormId'] = dynamicFormId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/view',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve forms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDynaForm: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/getdynaforms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/getdynaforms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve form response 
         * @param {number} dynamicFormId The ID of Form.
         * @param {number} [assignUserId] The ID of User.
         * @param {number} [assignmentId] The Assignment ID of the User.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormResponse: async (dynamicFormId: number, assignUserId?: number, assignmentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dynamicFormId' is not null or undefined
            assertParamExists('getFormResponse', 'dynamicFormId', dynamicFormId)
            const localVarPath = `/api/response/{dynamicFormId}`
                .replace(`{${"dynamicFormId"}}`, encodeURIComponent(String(dynamicFormId !== undefined ? dynamicFormId : `-dynamicFormId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (assignUserId !== undefined) {
                localVarQueryParameter['assignUserId'] = assignUserId;
            }

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/response/{dynamicFormId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve form responses
         * @param {number} dynamicFormId The ID of Form.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormResponses: async (dynamicFormId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dynamicFormId' is not null or undefined
            assertParamExists('getFormResponses', 'dynamicFormId', dynamicFormId)
            const localVarPath = `/api/responselist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (dynamicFormId !== undefined) {
                localVarQueryParameter['dynamicFormId'] = dynamicFormId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/responselist',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save form repsonse 
         * @param {number} assignmentId The Assignment ID of the User.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveFormResponse: async (assignmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('saveFormResponse', 'assignmentId', assignmentId)
            const localVarPath = `/api/saveFormResponse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/saveFormResponse',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save item response
         * @param {number} assignmentId The Assignment ID of the User.
         * @param {number} itemId The ID of the form Item.
         * @param {string} responseValue Response Value to save in Form.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitItemResponse: async (assignmentId: number, itemId: number, responseValue: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('submitItemResponse', 'assignmentId', assignmentId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('submitItemResponse', 'itemId', itemId)
            // verify required parameter 'responseValue' is not null or undefined
            assertParamExists('submitItemResponse', 'responseValue', responseValue)
            const localVarPath = `/api/saveItemResponse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (responseValue !== undefined) {
                localVarQueryParameter['responseValue'] = responseValue;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/saveItemResponse',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormsApi - functional programming interface
 * @export
 */
export const FormsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve completed forms assigned to me  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignedForms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignedForms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve form details
         * @param {FormsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: FormsApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.dynamicFormId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve forms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDynaForm(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDynaForm(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve form response 
         * @param {FormsApiGetFormResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormResponse(requestParameters: FormsApiGetFormResponseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormResponse(requestParameters.dynamicFormId, requestParameters.assignUserId, requestParameters.assignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve form responses
         * @param {FormsApiGetFormResponsesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormResponses(requestParameters: FormsApiGetFormResponsesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormResponses(requestParameters.dynamicFormId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save form repsonse 
         * @param {FormsApiSaveFormResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveFormResponse(requestParameters: FormsApiSaveFormResponseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveFormResponse(requestParameters.assignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save item response
         * @param {FormsApiSubmitItemResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitItemResponse(requestParameters: FormsApiSubmitItemResponseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitItemResponse(requestParameters.assignmentId, requestParameters.itemId, requestParameters.responseValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FormsApi - factory interface
 * @export
 */
export const FormsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve completed forms assigned to me  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignedForms(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getAssignedForms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve form details
         * @param {FormsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: FormsApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve forms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDynaForm(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getDynaForm(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve form response 
         * @param {FormsApiGetFormResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormResponse(requestParameters: FormsApiGetFormResponseRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getFormResponse(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve form responses
         * @param {FormsApiGetFormResponsesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormResponses(requestParameters: FormsApiGetFormResponsesRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getFormResponses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save form repsonse 
         * @param {FormsApiSaveFormResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveFormResponse(requestParameters: FormsApiSaveFormResponseRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.saveFormResponse(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save item response
         * @param {FormsApiSubmitItemResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitItemResponse(requestParameters: FormsApiSubmitItemResponseRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.submitItemResponse(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetails operation in FormsApi.
 * @export
 * @interface FormsApiGetDetailsRequest
 */
export type FormsApiGetDetailsRequest = {
    
    /**
    * The ID of Form.
    * @type {number}
    * @memberof FormsApiGetDetails
    */
    readonly dynamicFormId: number
    
}

/**
 * Request parameters for getFormResponse operation in FormsApi.
 * @export
 * @interface FormsApiGetFormResponseRequest
 */
export type FormsApiGetFormResponseRequest = {
    
    /**
    * The ID of Form.
    * @type {number}
    * @memberof FormsApiGetFormResponse
    */
    readonly dynamicFormId: number
    
    /**
    * The ID of User.
    * @type {number}
    * @memberof FormsApiGetFormResponse
    */
    readonly assignUserId?: number
    
    /**
    * The Assignment ID of the User.
    * @type {number}
    * @memberof FormsApiGetFormResponse
    */
    readonly assignmentId?: number
    
}

/**
 * Request parameters for getFormResponses operation in FormsApi.
 * @export
 * @interface FormsApiGetFormResponsesRequest
 */
export type FormsApiGetFormResponsesRequest = {
    
    /**
    * The ID of Form.
    * @type {number}
    * @memberof FormsApiGetFormResponses
    */
    readonly dynamicFormId: number
    
}

/**
 * Request parameters for saveFormResponse operation in FormsApi.
 * @export
 * @interface FormsApiSaveFormResponseRequest
 */
export type FormsApiSaveFormResponseRequest = {
    
    /**
    * The Assignment ID of the User.
    * @type {number}
    * @memberof FormsApiSaveFormResponse
    */
    readonly assignmentId: number
    
}

/**
 * Request parameters for submitItemResponse operation in FormsApi.
 * @export
 * @interface FormsApiSubmitItemResponseRequest
 */
export type FormsApiSubmitItemResponseRequest = {
    
    /**
    * The Assignment ID of the User.
    * @type {number}
    * @memberof FormsApiSubmitItemResponse
    */
    readonly assignmentId: number
    
    /**
    * The ID of the form Item.
    * @type {number}
    * @memberof FormsApiSubmitItemResponse
    */
    readonly itemId: number
    
    /**
    * Response Value to save in Form.
    * @type {string}
    * @memberof FormsApiSubmitItemResponse
    */
    readonly responseValue: string
    
}

/**
 * FormsApiGenerated - object-oriented interface
 * @export
 * @class FormsApiGenerated
 * @extends {BaseAPI}
 */
export class FormsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retrieve completed forms assigned to me  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApiGenerated
     */
    public getAssignedForms(options?: AxiosRequestConfig) {
        return FormsApiFp(this.configuration).getAssignedForms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve form details
     * @param {FormsApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApiGenerated
     */
    public getDetails(requestParameters: FormsApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return FormsApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve forms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApiGenerated
     */
    public getDynaForm(options?: AxiosRequestConfig) {
        return FormsApiFp(this.configuration).getDynaForm(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve form response 
     * @param {FormsApiGetFormResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApiGenerated
     */
    public getFormResponse(requestParameters: FormsApiGetFormResponseRequest, options?: AxiosRequestConfig) {
        return FormsApiFp(this.configuration).getFormResponse(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve form responses
     * @param {FormsApiGetFormResponsesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApiGenerated
     */
    public getFormResponses(requestParameters: FormsApiGetFormResponsesRequest, options?: AxiosRequestConfig) {
        return FormsApiFp(this.configuration).getFormResponses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save form repsonse 
     * @param {FormsApiSaveFormResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApiGenerated
     */
    public saveFormResponse(requestParameters: FormsApiSaveFormResponseRequest, options?: AxiosRequestConfig) {
        return FormsApiFp(this.configuration).saveFormResponse(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save item response
     * @param {FormsApiSubmitItemResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApiGenerated
     */
    public submitItemResponse(requestParameters: FormsApiSubmitItemResponseRequest, options?: AxiosRequestConfig) {
        return FormsApiFp(this.configuration).submitItemResponse(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
