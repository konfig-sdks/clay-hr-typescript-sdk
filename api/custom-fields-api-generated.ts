/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomFieldsGetById401Response } from '../models';
// @ts-ignore
import { CustomFieldsGetById409Response } from '../models';
// @ts-ignore
import { CustomFieldsGetByIdResponse } from '../models';
// @ts-ignore
import { CustomFieldsGetCustomFields401Response } from '../models';
// @ts-ignore
import { CustomFieldsGetCustomFields409Response } from '../models';
// @ts-ignore
import { CustomFieldsGetCustomFieldsResponse } from '../models';
// @ts-ignore
import { CustomFieldsGetCustomLists401Response } from '../models';
// @ts-ignore
import { CustomFieldsGetCustomLists409Response } from '../models';
// @ts-ignore
import { CustomFieldsGetCustomListsResponseInner } from '../models';
// @ts-ignore
import { CustomFieldsGetValue401Response } from '../models';
// @ts-ignore
import { CustomFieldsGetValue409Response } from '../models';
// @ts-ignore
import { CustomFieldsGetValueResponse } from '../models';
// @ts-ignore
import { CustomFieldsUpdateValue401Response } from '../models';
// @ts-ignore
import { CustomFieldsUpdateValue409Response } from '../models';
// @ts-ignore
import { CustomFieldsUpdateValueResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomFieldsApi - axios parameter creator
 * @export
 */
export const CustomFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve Custom Field by ID
         * @summary Retrieve Custom Field by ID
         * @param {number} customFieldId The ID of the custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (customFieldId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldId' is not null or undefined
            assertParamExists('getById', 'customFieldId', customFieldId)
            const localVarPath = `/customfield`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (customFieldId !== undefined) {
                localVarQueryParameter['customFieldId'] = customFieldId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customfield',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Custom Fields
         * @summary Retrieve Custom Fields
         * @param {string} [objectType] The object type of custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields: async (objectType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customfields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (objectType !== undefined) {
                localVarQueryParameter['objectType'] = objectType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customfields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Custom Lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomLists: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customlist',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Custom Field Value
         * @param {number} customFieldId customFieldId
         * @param {string} [customFieldCode] customFieldCode
         * @param {string} [userEmail] userEmail
         * @param {string} [empId] empId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValue: async (customFieldId: number, customFieldCode?: string, userEmail?: string, empId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldId' is not null or undefined
            assertParamExists('getValue', 'customFieldId', customFieldId)
            const localVarPath = `/customfieldvalues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (customFieldCode !== undefined) {
                localVarQueryParameter['customFieldCode'] = customFieldCode;
            }

            if (customFieldId !== undefined) {
                localVarQueryParameter['customFieldId'] = customFieldId;
            }

            if (userEmail !== undefined) {
                localVarQueryParameter['userEmail'] = userEmail;
            }

            if (empId !== undefined) {
                localVarQueryParameter['empId'] = empId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customfieldvalues',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Custom Field Value
         * @param {number} customFieldId 
         * @param {string} value 
         * @param {string} [customFieldCode] 
         * @param {string} [userEmail] 
         * @param {string} [empId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateValue: async (customFieldId: number, value: string, customFieldCode?: string, userEmail?: string, empId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldId' is not null or undefined
            assertParamExists('updateValue', 'customFieldId', customFieldId)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('updateValue', 'value', value)
            const localVarPath = `/customfieldvalues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (customFieldId !== undefined) {
                localVarQueryParameter['customFieldId'] = customFieldId;
            }

            if (customFieldCode !== undefined) {
                localVarQueryParameter['customFieldCode'] = customFieldCode;
            }

            if (userEmail !== undefined) {
                localVarQueryParameter['userEmail'] = userEmail;
            }

            if (empId !== undefined) {
                localVarQueryParameter['empId'] = empId;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customfieldvalues',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFieldsApi - functional programming interface
 * @export
 */
export const CustomFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve Custom Field by ID
         * @summary Retrieve Custom Field by ID
         * @param {CustomFieldsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CustomFieldsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.customFieldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve Custom Fields
         * @summary Retrieve Custom Fields
         * @param {CustomFieldsApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFields(requestParameters: CustomFieldsApiGetCustomFieldsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsGetCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFields(requestParameters.objectType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Custom Lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomLists(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomFieldsGetCustomListsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomLists(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Custom Field Value
         * @param {CustomFieldsApiGetValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValue(requestParameters: CustomFieldsApiGetValueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsGetValueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValue(requestParameters.customFieldId, requestParameters.customFieldCode, requestParameters.userEmail, requestParameters.empId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Custom Field Value
         * @param {CustomFieldsApiUpdateValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateValue(requestParameters: CustomFieldsApiUpdateValueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsUpdateValueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateValue(requestParameters.customFieldId, requestParameters.value, requestParameters.customFieldCode, requestParameters.userEmail, requestParameters.empId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomFieldsApi - factory interface
 * @export
 */
export const CustomFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFieldsApiFp(configuration)
    return {
        /**
         * Retrieve Custom Field by ID
         * @summary Retrieve Custom Field by ID
         * @param {CustomFieldsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CustomFieldsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Custom Fields
         * @summary Retrieve Custom Fields
         * @param {CustomFieldsApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields(requestParameters: CustomFieldsApiGetCustomFieldsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsGetCustomFieldsResponse> {
            return localVarFp.getCustomFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Custom Lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomLists(options?: AxiosRequestConfig): AxiosPromise<Array<CustomFieldsGetCustomListsResponseInner>> {
            return localVarFp.getCustomLists(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Custom Field Value
         * @param {CustomFieldsApiGetValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValue(requestParameters: CustomFieldsApiGetValueRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsGetValueResponse> {
            return localVarFp.getValue(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Custom Field Value
         * @param {CustomFieldsApiUpdateValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateValue(requestParameters: CustomFieldsApiUpdateValueRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsUpdateValueResponse> {
            return localVarFp.updateValue(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiGetByIdRequest
 */
export type CustomFieldsApiGetByIdRequest = {
    
    /**
    * The ID of the custom field.
    * @type {number}
    * @memberof CustomFieldsApiGetById
    */
    readonly customFieldId: number
    
}

/**
 * Request parameters for getCustomFields operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiGetCustomFieldsRequest
 */
export type CustomFieldsApiGetCustomFieldsRequest = {
    
    /**
    * The object type of custom field.
    * @type {string}
    * @memberof CustomFieldsApiGetCustomFields
    */
    readonly objectType?: string
    
}

/**
 * Request parameters for getValue operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiGetValueRequest
 */
export type CustomFieldsApiGetValueRequest = {
    
    /**
    * customFieldId
    * @type {number}
    * @memberof CustomFieldsApiGetValue
    */
    readonly customFieldId: number
    
    /**
    * customFieldCode
    * @type {string}
    * @memberof CustomFieldsApiGetValue
    */
    readonly customFieldCode?: string
    
    /**
    * userEmail
    * @type {string}
    * @memberof CustomFieldsApiGetValue
    */
    readonly userEmail?: string
    
    /**
    * empId
    * @type {string}
    * @memberof CustomFieldsApiGetValue
    */
    readonly empId?: string
    
}

/**
 * Request parameters for updateValue operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiUpdateValueRequest
 */
export type CustomFieldsApiUpdateValueRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof CustomFieldsApiUpdateValue
    */
    readonly customFieldId: number
    
    /**
    * 
    * @type {string}
    * @memberof CustomFieldsApiUpdateValue
    */
    readonly value: string
    
    /**
    * 
    * @type {string}
    * @memberof CustomFieldsApiUpdateValue
    */
    readonly customFieldCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CustomFieldsApiUpdateValue
    */
    readonly userEmail?: string
    
    /**
    * 
    * @type {string}
    * @memberof CustomFieldsApiUpdateValue
    */
    readonly empId?: string
    
}

/**
 * CustomFieldsApiGenerated - object-oriented interface
 * @export
 * @class CustomFieldsApiGenerated
 * @extends {BaseAPI}
 */
export class CustomFieldsApiGenerated extends BaseAPI {
    /**
     * Retrieve Custom Field by ID
     * @summary Retrieve Custom Field by ID
     * @param {CustomFieldsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public getById(requestParameters: CustomFieldsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Custom Fields
     * @summary Retrieve Custom Fields
     * @param {CustomFieldsApiGetCustomFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public getCustomFields(requestParameters: CustomFieldsApiGetCustomFieldsRequest = {}, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).getCustomFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Custom Lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public getCustomLists(options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).getCustomLists(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Custom Field Value
     * @param {CustomFieldsApiGetValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public getValue(requestParameters: CustomFieldsApiGetValueRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).getValue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Custom Field Value
     * @param {CustomFieldsApiUpdateValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public updateValue(requestParameters: CustomFieldsApiUpdateValueRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).updateValue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
