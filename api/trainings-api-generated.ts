/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TrainingsApi - axios parameter creator
 * @export
 */
export const TrainingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve trainings by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUserId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trainings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/trainings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve training content by training ID
         * @param {number} trainingId trainingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainingContentByTrainingId: async (trainingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trainingId' is not null or undefined
            assertParamExists('getTrainingContentByTrainingId', 'trainingId', trainingId)
            const localVarPath = `/api/training/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (trainingId !== undefined) {
                localVarQueryParameter['trainingId'] = trainingId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/training/content',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync with talent LMS
         * @param {string} redirectUrl redirectUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        synchronizeWithTalentLMS: async (redirectUrl: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'redirectUrl' is not null or undefined
            assertParamExists('synchronizeWithTalentLMS', 'redirectUrl', redirectUrl)
            const localVarPath = `/api/training/talentlms/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (redirectUrl != null) {
                localVarHeaderParameter['redirectUrl'] = String(redirectUrl);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/training/talentlms/sync',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update training status for user
         * @param {string} status Status of the user training.
         * @param {number} userTrainingId The ID of the user training.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserStatus: async (status: string, userTrainingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateUserStatus', 'status', status)
            // verify required parameter 'userTrainingId' is not null or undefined
            assertParamExists('updateUserStatus', 'userTrainingId', userTrainingId)
            const localVarPath = `/api/training/status/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (userTrainingId !== undefined) {
                localVarQueryParameter['userTrainingId'] = userTrainingId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/training/status/update',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainingsApi - functional programming interface
 * @export
 */
export const TrainingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve trainings by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByUserId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByUserId(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve training content by training ID
         * @param {TrainingsApiGetTrainingContentByTrainingIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrainingContentByTrainingId(requestParameters: TrainingsApiGetTrainingContentByTrainingIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrainingContentByTrainingId(requestParameters.trainingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sync with talent LMS
         * @param {TrainingsApiSynchronizeWithTalentLMSRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async synchronizeWithTalentLMS(requestParameters: TrainingsApiSynchronizeWithTalentLMSRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.synchronizeWithTalentLMS(requestParameters.redirectUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update training status for user
         * @param {TrainingsApiUpdateUserStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserStatus(requestParameters: TrainingsApiUpdateUserStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserStatus(requestParameters.status, requestParameters.userTrainingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainingsApi - factory interface
 * @export
 */
export const TrainingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve trainings by user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUserId(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getByUserId(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve training content by training ID
         * @param {TrainingsApiGetTrainingContentByTrainingIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainingContentByTrainingId(requestParameters: TrainingsApiGetTrainingContentByTrainingIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTrainingContentByTrainingId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync with talent LMS
         * @param {TrainingsApiSynchronizeWithTalentLMSRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        synchronizeWithTalentLMS(requestParameters: TrainingsApiSynchronizeWithTalentLMSRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.synchronizeWithTalentLMS(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update training status for user
         * @param {TrainingsApiUpdateUserStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserStatus(requestParameters: TrainingsApiUpdateUserStatusRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateUserStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTrainingContentByTrainingId operation in TrainingsApi.
 * @export
 * @interface TrainingsApiGetTrainingContentByTrainingIdRequest
 */
export type TrainingsApiGetTrainingContentByTrainingIdRequest = {
    
    /**
    * trainingId
    * @type {number}
    * @memberof TrainingsApiGetTrainingContentByTrainingId
    */
    readonly trainingId: number
    
}

/**
 * Request parameters for synchronizeWithTalentLMS operation in TrainingsApi.
 * @export
 * @interface TrainingsApiSynchronizeWithTalentLMSRequest
 */
export type TrainingsApiSynchronizeWithTalentLMSRequest = {
    
    /**
    * redirectUrl
    * @type {string}
    * @memberof TrainingsApiSynchronizeWithTalentLMS
    */
    readonly redirectUrl: string
    
}

/**
 * Request parameters for updateUserStatus operation in TrainingsApi.
 * @export
 * @interface TrainingsApiUpdateUserStatusRequest
 */
export type TrainingsApiUpdateUserStatusRequest = {
    
    /**
    * Status of the user training.
    * @type {string}
    * @memberof TrainingsApiUpdateUserStatus
    */
    readonly status: string
    
    /**
    * The ID of the user training.
    * @type {number}
    * @memberof TrainingsApiUpdateUserStatus
    */
    readonly userTrainingId: number
    
}

/**
 * TrainingsApiGenerated - object-oriented interface
 * @export
 * @class TrainingsApiGenerated
 * @extends {BaseAPI}
 */
export class TrainingsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retrieve trainings by user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingsApiGenerated
     */
    public getByUserId(options?: AxiosRequestConfig) {
        return TrainingsApiFp(this.configuration).getByUserId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve training content by training ID
     * @param {TrainingsApiGetTrainingContentByTrainingIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingsApiGenerated
     */
    public getTrainingContentByTrainingId(requestParameters: TrainingsApiGetTrainingContentByTrainingIdRequest, options?: AxiosRequestConfig) {
        return TrainingsApiFp(this.configuration).getTrainingContentByTrainingId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync with talent LMS
     * @param {TrainingsApiSynchronizeWithTalentLMSRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingsApiGenerated
     */
    public synchronizeWithTalentLMS(requestParameters: TrainingsApiSynchronizeWithTalentLMSRequest, options?: AxiosRequestConfig) {
        return TrainingsApiFp(this.configuration).synchronizeWithTalentLMS(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update training status for user
     * @param {TrainingsApiUpdateUserStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingsApiGenerated
     */
    public updateUserStatus(requestParameters: TrainingsApiUpdateUserStatusRequest, options?: AxiosRequestConfig) {
        return TrainingsApiFp(this.configuration).updateUserStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
