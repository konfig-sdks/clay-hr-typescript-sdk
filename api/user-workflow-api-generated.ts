/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UserWorkflowAssignWorkflowToUser401Response } from '../models';
// @ts-ignore
import { UserWorkflowAssignWorkflowToUser403Response } from '../models';
// @ts-ignore
import { UserWorkflowAssignWorkflowToUser404Response } from '../models';
// @ts-ignore
import { UserWorkflowAssignWorkflowToUser409Response } from '../models';
// @ts-ignore
import { UserWorkflowAssignWorkflowToUserResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UserWorkflowApi - axios parameter creator
 * @export
 */
export const UserWorkflowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This page will help you get started with Assign Workflow to User.
         * @summary Assign Workflow to User
         * @param {number} workflowId The ID of the workflow.
         * @param {number} assigneeUserId The ID of Workflow Assignee.
         * @param {number} coordinatorUserId The ID of Workflow Coordinator.
         * @param {string} [comment] Comment of the workflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignWorkflowToUser: async (workflowId: number, assigneeUserId: number, coordinatorUserId: number, comment?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('assignWorkflowToUser', 'workflowId', workflowId)
            // verify required parameter 'assigneeUserId' is not null or undefined
            assertParamExists('assignWorkflowToUser', 'assigneeUserId', assigneeUserId)
            // verify required parameter 'coordinatorUserId' is not null or undefined
            assertParamExists('assignWorkflowToUser', 'coordinatorUserId', coordinatorUserId)
            const localVarPath = `/api/v3/userworkflow/assign/{workflowId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId !== undefined ? workflowId : `-workflowId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (assigneeUserId !== undefined) {
                localVarQueryParameter['assigneeUserId'] = assigneeUserId;
            }

            if (coordinatorUserId !== undefined) {
                localVarQueryParameter['coordinatorUserId'] = coordinatorUserId;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/userworkflow/assign/{workflowId}',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserWorkflowApi - functional programming interface
 * @export
 */
export const UserWorkflowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserWorkflowApiAxiosParamCreator(configuration)
    return {
        /**
         * This page will help you get started with Assign Workflow to User.
         * @summary Assign Workflow to User
         * @param {UserWorkflowApiAssignWorkflowToUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignWorkflowToUser(requestParameters: UserWorkflowApiAssignWorkflowToUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWorkflowAssignWorkflowToUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignWorkflowToUser(requestParameters.workflowId, requestParameters.assigneeUserId, requestParameters.coordinatorUserId, requestParameters.comment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserWorkflowApi - factory interface
 * @export
 */
export const UserWorkflowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserWorkflowApiFp(configuration)
    return {
        /**
         * This page will help you get started with Assign Workflow to User.
         * @summary Assign Workflow to User
         * @param {UserWorkflowApiAssignWorkflowToUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignWorkflowToUser(requestParameters: UserWorkflowApiAssignWorkflowToUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserWorkflowAssignWorkflowToUserResponse> {
            return localVarFp.assignWorkflowToUser(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignWorkflowToUser operation in UserWorkflowApi.
 * @export
 * @interface UserWorkflowApiAssignWorkflowToUserRequest
 */
export type UserWorkflowApiAssignWorkflowToUserRequest = {
    
    /**
    * The ID of the workflow.
    * @type {number}
    * @memberof UserWorkflowApiAssignWorkflowToUser
    */
    readonly workflowId: number
    
    /**
    * The ID of Workflow Assignee.
    * @type {number}
    * @memberof UserWorkflowApiAssignWorkflowToUser
    */
    readonly assigneeUserId: number
    
    /**
    * The ID of Workflow Coordinator.
    * @type {number}
    * @memberof UserWorkflowApiAssignWorkflowToUser
    */
    readonly coordinatorUserId: number
    
    /**
    * Comment of the workflow.
    * @type {string}
    * @memberof UserWorkflowApiAssignWorkflowToUser
    */
    readonly comment?: string
    
}

/**
 * UserWorkflowApiGenerated - object-oriented interface
 * @export
 * @class UserWorkflowApiGenerated
 * @extends {BaseAPI}
 */
export class UserWorkflowApiGenerated extends BaseAPI {
    /**
     * This page will help you get started with Assign Workflow to User.
     * @summary Assign Workflow to User
     * @param {UserWorkflowApiAssignWorkflowToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWorkflowApiGenerated
     */
    public assignWorkflowToUser(requestParameters: UserWorkflowApiAssignWorkflowToUserRequest, options?: AxiosRequestConfig) {
        return UserWorkflowApiFp(this.configuration).assignWorkflowToUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
