/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectAssignUserAllocationRequest } from '../models';
// @ts-ignore
import { ProjectCreateNewRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assigns the project to the user based on the project ID and user ID and returns the userProjectId, which is the ID of the assignment.
         * @summary Assign Project Allocation
         * @param {ProjectAssignUserAllocationRequest} [projectAssignUserAllocationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserAllocation: async (projectAssignUserAllocationRequest?: ProjectAssignUserAllocationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects/allocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectAssignUserAllocationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/projects/allocation',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectAssignUserAllocationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new project.
         * @summary Create Project
         * @param {ProjectCreateNewRequest} [projectCreateNewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (projectCreateNewRequest?: ProjectCreateNewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectCreateNewRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/projects',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreateNewRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the details of the Project by ID.
         * @summary Retrieve Project
         * @param {string} projectId The ID of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailsById: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('detailsById', 'projectId', projectId)
            const localVarPath = `/api/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/projects/{projectId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all user allocations for the project.
         * @summary List Allocations
         * @param {number} projectId The ID of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllocations: async (projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listAllocations', 'projectId', projectId)
            const localVarPath = `/api/projects/allocation/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/projects/allocation/{projectId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of projects.
         * @summary List Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Assigns the project to the user based on the project ID and user ID and returns the userProjectId, which is the ID of the assignment.
         * @summary Assign Project Allocation
         * @param {ProjectApiAssignUserAllocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignUserAllocation(requestParameters: ProjectApiAssignUserAllocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const projectAssignUserAllocationRequest: ProjectAssignUserAllocationRequest = {
                projectId: requestParameters.projectId,
                userId: requestParameters.userId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignUserAllocation(projectAssignUserAllocationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new project.
         * @summary Create Project
         * @param {ProjectApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: ProjectApiCreateNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const projectCreateNewRequest: ProjectCreateNewRequest = {
                projectName: requestParameters.projectName,
                projectDesc: requestParameters.projectDesc,
                shortCode: requestParameters.shortCode,
                startDate: requestParameters.startDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(projectCreateNewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the details of the Project by ID.
         * @summary Retrieve Project
         * @param {ProjectApiDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailsById(requestParameters: ProjectApiDetailsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailsById(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all user allocations for the project.
         * @summary List Allocations
         * @param {ProjectApiListAllocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllocations(requestParameters: ProjectApiListAllocationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllocations(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of projects.
         * @summary List Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Assigns the project to the user based on the project ID and user ID and returns the userProjectId, which is the ID of the assignment.
         * @summary Assign Project Allocation
         * @param {ProjectApiAssignUserAllocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserAllocation(requestParameters: ProjectApiAssignUserAllocationRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.assignUserAllocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new project.
         * @summary Create Project
         * @param {ProjectApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: ProjectApiCreateNewRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of the Project by ID.
         * @summary Retrieve Project
         * @param {ProjectApiDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailsById(requestParameters: ProjectApiDetailsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.detailsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all user allocations for the project.
         * @summary List Allocations
         * @param {ProjectApiListAllocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllocations(requestParameters: ProjectApiListAllocationsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listAllocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of projects.
         * @summary List Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listProjects(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignUserAllocation operation in ProjectApi.
 * @export
 * @interface ProjectApiAssignUserAllocationRequest
 */
export type ProjectApiAssignUserAllocationRequest = {
    
} & ProjectAssignUserAllocationRequest

/**
 * Request parameters for createNew operation in ProjectApi.
 * @export
 * @interface ProjectApiCreateNewRequest
 */
export type ProjectApiCreateNewRequest = {
    
} & ProjectCreateNewRequest

/**
 * Request parameters for detailsById operation in ProjectApi.
 * @export
 * @interface ProjectApiDetailsByIdRequest
 */
export type ProjectApiDetailsByIdRequest = {
    
    /**
    * The ID of the project.
    * @type {string}
    * @memberof ProjectApiDetailsById
    */
    readonly projectId: string
    
}

/**
 * Request parameters for listAllocations operation in ProjectApi.
 * @export
 * @interface ProjectApiListAllocationsRequest
 */
export type ProjectApiListAllocationsRequest = {
    
    /**
    * The ID of the project.
    * @type {number}
    * @memberof ProjectApiListAllocations
    */
    readonly projectId: number
    
}

/**
 * ProjectApiGenerated - object-oriented interface
 * @export
 * @class ProjectApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectApiGenerated extends BaseAPI {
    /**
     * Assigns the project to the user based on the project ID and user ID and returns the userProjectId, which is the ID of the assignment.
     * @summary Assign Project Allocation
     * @param {ProjectApiAssignUserAllocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public assignUserAllocation(requestParameters: ProjectApiAssignUserAllocationRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).assignUserAllocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new project.
     * @summary Create Project
     * @param {ProjectApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public createNew(requestParameters: ProjectApiCreateNewRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the details of the Project by ID.
     * @summary Retrieve Project
     * @param {ProjectApiDetailsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public detailsById(requestParameters: ProjectApiDetailsByIdRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).detailsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all user allocations for the project.
     * @summary List Allocations
     * @param {ProjectApiListAllocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public listAllocations(requestParameters: ProjectApiListAllocationsRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).listAllocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of projects.
     * @summary List Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public listProjects(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).listProjects(options).then((request) => request(this.axios, this.basePath));
    }
}
