/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AnnouncementApi - axios parameter creator
 * @export
 */
export const AnnouncementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  
         * @summary Create Announcement
         * @param {string} title Title of the announcement.
         * @param {string} description Description of the announcement.
         * @param {string} [url] Any link associated/brief of the announcement.
         * @param {'A' | 'D' | 'I'} [status] Status of Announcement. Choose between [\&quot;A\&quot;, \&quot;D\&quot;, \&quot;I\&quot;]. Defaults to \&quot;A\&quot;.   A - Active, D - In Draft, I - Archive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAnnouncement: async (title: string, description: string, url?: string, status?: 'A' | 'D' | 'I', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('createNewAnnouncement', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('createNewAnnouncement', 'description', description)
            const localVarPath = `/api/announcement/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/announcement/create',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Announcement Attachments
         * @param {number} annId The ID of the announcement.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsById: async (annId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annId' is not null or undefined
            assertParamExists('getAttachmentsById', 'annId', annId)
            const localVarPath = `/api/attachment/list/{annId}`
                .replace(`{${"annId"}}`, encodeURIComponent(String(annId !== undefined ? annId : `-annId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/attachment/list/{annId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Announcement
         * @param {number} annId The ID of the announcement.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (annId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annId' is not null or undefined
            assertParamExists('getById', 'annId', annId)
            const localVarPath = `/api/announcement/{annId}`
                .replace(`{${"annId"}}`, encodeURIComponent(String(annId !== undefined ? annId : `-annId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/announcement/{annId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Announcement
         * @param {number} annId The ID of the announcement.
         * @param {string} title Title of the announcement.
         * @param {string} desciption Description of the announcement.
         * @param {'A' | 'D' | 'I'} status Status of Announcement. Choose between [\&quot;A\&quot;, \&quot;D\&quot;, \&quot;I\&quot;]. Defaults to \&quot;A\&quot;.   A - Active, D - In Draft, I - Archive
         * @param {string} [url] Link associated with the announcement.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnnouncement: async (annId: number, title: string, desciption: string, status: 'A' | 'D' | 'I', url?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annId' is not null or undefined
            assertParamExists('updateAnnouncement', 'annId', annId)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('updateAnnouncement', 'title', title)
            // verify required parameter 'desciption' is not null or undefined
            assertParamExists('updateAnnouncement', 'desciption', desciption)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateAnnouncement', 'status', status)
            const localVarPath = `/api/announcement/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (annId !== undefined) {
                localVarQueryParameter['annId'] = annId;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (desciption !== undefined) {
                localVarQueryParameter['desciption'] = desciption;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/announcement/edit',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnouncementApi - functional programming interface
 * @export
 */
export const AnnouncementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnouncementApiAxiosParamCreator(configuration)
    return {
        /**
         *  
         * @summary Create Announcement
         * @param {AnnouncementApiCreateNewAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAnnouncement(requestParameters: AnnouncementApiCreateNewAnnouncementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAnnouncement(requestParameters.title, requestParameters.description, requestParameters.url, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Announcement Attachments
         * @param {AnnouncementApiGetAttachmentsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachmentsById(requestParameters: AnnouncementApiGetAttachmentsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttachmentsById(requestParameters.annId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Announcement
         * @param {AnnouncementApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: AnnouncementApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.annId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Announcement
         * @param {AnnouncementApiUpdateAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAnnouncement(requestParameters: AnnouncementApiUpdateAnnouncementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAnnouncement(requestParameters.annId, requestParameters.title, requestParameters.desciption, requestParameters.status, requestParameters.url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnnouncementApi - factory interface
 * @export
 */
export const AnnouncementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnouncementApiFp(configuration)
    return {
        /**
         *  
         * @summary Create Announcement
         * @param {AnnouncementApiCreateNewAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAnnouncement(requestParameters: AnnouncementApiCreateNewAnnouncementRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createNewAnnouncement(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Announcement Attachments
         * @param {AnnouncementApiGetAttachmentsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsById(requestParameters: AnnouncementApiGetAttachmentsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getAttachmentsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Announcement
         * @param {AnnouncementApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: AnnouncementApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Announcement
         * @param {AnnouncementApiUpdateAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnnouncement(requestParameters: AnnouncementApiUpdateAnnouncementRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateAnnouncement(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewAnnouncement operation in AnnouncementApi.
 * @export
 * @interface AnnouncementApiCreateNewAnnouncementRequest
 */
export type AnnouncementApiCreateNewAnnouncementRequest = {
    
    /**
    * Title of the announcement.
    * @type {string}
    * @memberof AnnouncementApiCreateNewAnnouncement
    */
    readonly title: string
    
    /**
    * Description of the announcement.
    * @type {string}
    * @memberof AnnouncementApiCreateNewAnnouncement
    */
    readonly description: string
    
    /**
    * Any link associated/brief of the announcement.
    * @type {string}
    * @memberof AnnouncementApiCreateNewAnnouncement
    */
    readonly url?: string
    
    /**
    * Status of Announcement. Choose between [\"A\", \"D\", \"I\"]. Defaults to \"A\".   A - Active, D - In Draft, I - Archive
    * @type {'A' | 'D' | 'I'}
    * @memberof AnnouncementApiCreateNewAnnouncement
    */
    readonly status?: 'A' | 'D' | 'I'
    
}

/**
 * Request parameters for getAttachmentsById operation in AnnouncementApi.
 * @export
 * @interface AnnouncementApiGetAttachmentsByIdRequest
 */
export type AnnouncementApiGetAttachmentsByIdRequest = {
    
    /**
    * The ID of the announcement.
    * @type {number}
    * @memberof AnnouncementApiGetAttachmentsById
    */
    readonly annId: number
    
}

/**
 * Request parameters for getById operation in AnnouncementApi.
 * @export
 * @interface AnnouncementApiGetByIdRequest
 */
export type AnnouncementApiGetByIdRequest = {
    
    /**
    * The ID of the announcement.
    * @type {number}
    * @memberof AnnouncementApiGetById
    */
    readonly annId: number
    
}

/**
 * Request parameters for updateAnnouncement operation in AnnouncementApi.
 * @export
 * @interface AnnouncementApiUpdateAnnouncementRequest
 */
export type AnnouncementApiUpdateAnnouncementRequest = {
    
    /**
    * The ID of the announcement.
    * @type {number}
    * @memberof AnnouncementApiUpdateAnnouncement
    */
    readonly annId: number
    
    /**
    * Title of the announcement.
    * @type {string}
    * @memberof AnnouncementApiUpdateAnnouncement
    */
    readonly title: string
    
    /**
    * Description of the announcement.
    * @type {string}
    * @memberof AnnouncementApiUpdateAnnouncement
    */
    readonly desciption: string
    
    /**
    * Status of Announcement. Choose between [\"A\", \"D\", \"I\"]. Defaults to \"A\".   A - Active, D - In Draft, I - Archive
    * @type {'A' | 'D' | 'I'}
    * @memberof AnnouncementApiUpdateAnnouncement
    */
    readonly status: 'A' | 'D' | 'I'
    
    /**
    * Link associated with the announcement.
    * @type {string}
    * @memberof AnnouncementApiUpdateAnnouncement
    */
    readonly url?: string
    
}

/**
 * AnnouncementApiGenerated - object-oriented interface
 * @export
 * @class AnnouncementApiGenerated
 * @extends {BaseAPI}
 */
export class AnnouncementApiGenerated extends BaseAPI {
    /**
     *  
     * @summary Create Announcement
     * @param {AnnouncementApiCreateNewAnnouncementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementApiGenerated
     */
    public createNewAnnouncement(requestParameters: AnnouncementApiCreateNewAnnouncementRequest, options?: AxiosRequestConfig) {
        return AnnouncementApiFp(this.configuration).createNewAnnouncement(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Announcement Attachments
     * @param {AnnouncementApiGetAttachmentsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementApiGenerated
     */
    public getAttachmentsById(requestParameters: AnnouncementApiGetAttachmentsByIdRequest, options?: AxiosRequestConfig) {
        return AnnouncementApiFp(this.configuration).getAttachmentsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Announcement
     * @param {AnnouncementApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementApiGenerated
     */
    public getById(requestParameters: AnnouncementApiGetByIdRequest, options?: AxiosRequestConfig) {
        return AnnouncementApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Announcement
     * @param {AnnouncementApiUpdateAnnouncementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementApiGenerated
     */
    public updateAnnouncement(requestParameters: AnnouncementApiUpdateAnnouncementRequest, options?: AxiosRequestConfig) {
        return AnnouncementApiFp(this.configuration).updateAnnouncement(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
