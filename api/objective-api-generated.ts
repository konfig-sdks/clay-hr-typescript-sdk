/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ObjectiveGetByUserIdOrSpecificObjectiveById401Response } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ObjectiveApi - axios parameter creator
 * @export
 */
export const ObjectiveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve objectives by user ID or specific objective by objective ID
         * @summary Retrieve objectives
         * @param {string} [objectiveId] ID of Objective
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUserIdOrSpecificObjectiveById: async (objectiveId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objective`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (objectiveId !== undefined) {
                localVarQueryParameter['objectiveId'] = objectiveId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/objective',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectiveApi - functional programming interface
 * @export
 */
export const ObjectiveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectiveApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve objectives by user ID or specific objective by objective ID
         * @summary Retrieve objectives
         * @param {ObjectiveApiGetByUserIdOrSpecificObjectiveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByUserIdOrSpecificObjectiveById(requestParameters: ObjectiveApiGetByUserIdOrSpecificObjectiveByIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByUserIdOrSpecificObjectiveById(requestParameters.objectiveId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectiveApi - factory interface
 * @export
 */
export const ObjectiveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectiveApiFp(configuration)
    return {
        /**
         * Retrieve objectives by user ID or specific objective by objective ID
         * @summary Retrieve objectives
         * @param {ObjectiveApiGetByUserIdOrSpecificObjectiveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUserIdOrSpecificObjectiveById(requestParameters: ObjectiveApiGetByUserIdOrSpecificObjectiveByIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getByUserIdOrSpecificObjectiveById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByUserIdOrSpecificObjectiveById operation in ObjectiveApi.
 * @export
 * @interface ObjectiveApiGetByUserIdOrSpecificObjectiveByIdRequest
 */
export type ObjectiveApiGetByUserIdOrSpecificObjectiveByIdRequest = {
    
    /**
    * ID of Objective
    * @type {string}
    * @memberof ObjectiveApiGetByUserIdOrSpecificObjectiveById
    */
    readonly objectiveId?: string
    
}

/**
 * ObjectiveApiGenerated - object-oriented interface
 * @export
 * @class ObjectiveApiGenerated
 * @extends {BaseAPI}
 */
export class ObjectiveApiGenerated extends BaseAPI {
    /**
     * Retrieve objectives by user ID or specific objective by objective ID
     * @summary Retrieve objectives
     * @param {ObjectiveApiGetByUserIdOrSpecificObjectiveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectiveApiGenerated
     */
    public getByUserIdOrSpecificObjectiveById(requestParameters: ObjectiveApiGetByUserIdOrSpecificObjectiveByIdRequest = {}, options?: AxiosRequestConfig) {
        return ObjectiveApiFp(this.configuration).getByUserIdOrSpecificObjectiveById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
