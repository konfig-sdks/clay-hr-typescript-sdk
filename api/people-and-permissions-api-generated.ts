/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PeopleAndPermissionsAddReportsToRequest } from '../models';
// @ts-ignore
import { PeopleAndPermissionsAddReportsToRequestAddObjectsInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsAddReportsToResponse } from '../models';
// @ts-ignore
import { PeopleAndPermissionsCreateOrUpdateUserDetails201Response } from '../models';
// @ts-ignore
import { PeopleAndPermissionsCreateOrUpdateUserDetails400Response } from '../models';
// @ts-ignore
import { PeopleAndPermissionsCreateOrUpdateUserDetails401Response } from '../models';
// @ts-ignore
import { PeopleAndPermissionsCreateOrUpdateUserDetails409Response } from '../models';
// @ts-ignore
import { PeopleAndPermissionsCreateOrUpdateUserDetailsRequest } from '../models';
// @ts-ignore
import { PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactListInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationListInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsDeleteUserAddressResponse } from '../models';
// @ts-ignore
import { PeopleAndPermissionsDeleteUserEmploymentResponse } from '../models';
// @ts-ignore
import { PeopleAndPermissionsGetAllUsersDetailsResponseInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsGetBasicUserDetailsResponseInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsGetUsersResponse } from '../models';
// @ts-ignore
import { PeopleAndPermissionsSaveCustomFieldValuesResponse } from '../models';
// @ts-ignore
import { PeopleAndPermissionsSaveUserAddressRequest } from '../models';
// @ts-ignore
import { PeopleAndPermissionsSaveUserAddressRequestRAWBODYInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsSaveUserAddressResponse } from '../models';
// @ts-ignore
import { PeopleAndPermissionsSaveUserEducationRequest } from '../models';
// @ts-ignore
import { PeopleAndPermissionsSaveUserEducationRequestRAWBODYInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsSaveUserEmploymentRequest } from '../models';
// @ts-ignore
import { PeopleAndPermissionsSaveUserEmploymentRequestRAWBODYInner } from '../models';
// @ts-ignore
import { PeopleAndPermissionsUploadUserProfilePictureRequest } from '../models';
// @ts-ignore
import { PeopleAndPermissionsUploadUserProfilePictureResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PeopleAndPermissionsApi - axios parameter creator
 * @export
 */
export const PeopleAndPermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add reports to
         * @param {string} [empId] The unique identity of the employee. 
         * @param {string} [email] Email address of the user.
         * @param {PeopleAndPermissionsAddReportsToRequest} [peopleAndPermissionsAddReportsToRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReportsTo: async (empId?: string, email?: string, peopleAndPermissionsAddReportsToRequest?: PeopleAndPermissionsAddReportsToRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/orgrelation/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (empId !== undefined) {
                localVarQueryParameter['empId'] = empId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: peopleAndPermissionsAddReportsToRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/orgrelation/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(peopleAndPermissionsAddReportsToRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create or Update user
         * @param {PeopleAndPermissionsCreateOrUpdateUserDetailsRequest} [peopleAndPermissionsCreateOrUpdateUserDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateUserDetails: async (peopleAndPermissionsCreateOrUpdateUserDetailsRequest?: PeopleAndPermissionsCreateOrUpdateUserDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/completeUserDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: peopleAndPermissionsCreateOrUpdateUserDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/completeUserDetails',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(peopleAndPermissionsCreateOrUpdateUserDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create user
         * @param {string} firstName First name of user.
         * @param {string} email Mail ID of user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (firstName: string, email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('createUser', 'firstName', firstName)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createUser', 'email', email)
            const localVarPath = `/api/user/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create compensation for user
         * @param {string} value Value of compensation
         * @param {'sal' | 'pay' | 'bonus' | 'INCTV' | 'SVRC' | 'other'} compensationType Type of compensation.   sal - Salary, pay - , INCTV - Incentive, SVCR - Severance
         * @param {string} currencyCode 
         * @param {'HRLY' | 'DLY' | 'WKLY' | 'BWKLY' | 'MTHLY' | 'BMTH' | 'QTRLY' | 'BYRLY' | 'YRLY' | 'ONEF'} period Time period for compensation.   HRLY - Hourly, DLY - Daily, WKLY - Weekly,  BWKLY - Bi-Weekly, MTHLY - Monthly, BMTH - Bi-Monthly, QTRLY - Quarterly, BYRLY - Bi-Yearly, YRLY - Yearly,   ONEF - OneOff
         * @param {string} effectivedate 
         * @param {'ACTV' | 'ARCHV' | 'PVNL'} status Status of compensation.   ACTV - Active, ARCHV - Archive, PVNL - Provisional
         * @param {string} [enddate] 
         * @param {string} [notes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserCompensation: async (value: string, compensationType: 'sal' | 'pay' | 'bonus' | 'INCTV' | 'SVRC' | 'other', currencyCode: string, period: 'HRLY' | 'DLY' | 'WKLY' | 'BWKLY' | 'MTHLY' | 'BMTH' | 'QTRLY' | 'BYRLY' | 'YRLY' | 'ONEF', effectivedate: string, status: 'ACTV' | 'ARCHV' | 'PVNL', enddate?: string, notes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'value' is not null or undefined
            assertParamExists('createUserCompensation', 'value', value)
            // verify required parameter 'compensationType' is not null or undefined
            assertParamExists('createUserCompensation', 'compensationType', compensationType)
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('createUserCompensation', 'currencyCode', currencyCode)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('createUserCompensation', 'period', period)
            // verify required parameter 'effectivedate' is not null or undefined
            assertParamExists('createUserCompensation', 'effectivedate', effectivedate)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('createUserCompensation', 'status', status)
            const localVarPath = `/api/user/compensation/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (compensationType !== undefined) {
                localVarQueryParameter['compensationType'] = compensationType;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (effectivedate !== undefined) {
                localVarQueryParameter['effectivedate'] = effectivedate;
            }

            if (enddate !== undefined) {
                localVarQueryParameter['enddate'] = enddate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (notes !== undefined) {
                localVarQueryParameter['notes'] = notes;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/compensation/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User Address
         * @param {string} addressId The unique ID of the address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAddress: async (addressId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('deleteUserAddress', 'addressId', addressId)
            const localVarPath = `/api/user/address/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (addressId !== undefined) {
                localVarQueryParameter['addressId'] = addressId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/address/delete',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User Education
         * @param {string} educationId Education ID the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserEducation: async (educationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('deleteUserEducation', 'educationId', educationId)
            const localVarPath = `/user/education/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (educationId !== undefined) {
                localVarQueryParameter['educationId'] = educationId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user/education/delete',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes User Employment
         * @param {number} empid The unique identity of the employee. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserEmployment: async (empid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'empid' is not null or undefined
            assertParamExists('deleteUserEmployment', 'empid', empid)
            const localVarPath = `/api/user/employment/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (empid !== undefined) {
                localVarQueryParameter['empid'] = empid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/employment/delete',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all users details
         * @param {string} [name] Name of the user.
         * @param {number} [page] Page number.
         * @param {number} [pageSize] Number of users per page.
         * @param {string} [search] 
         * @param {string | Date} [startDateBefore] The date before the assigned Start Date.
         * @param {string | Date} [startDateAfter] The date after the assigned Start Date.
         * @param {string | Date} [endDateBefore] The date before the assigned End Date.
         * @param {string | Date} [endDateAfter] The date after the assigned End Date.
         * @param {'A' | 'I' | 'F'} [status] Status of the user.    A- Active User   I- Inactive User   F- Future Joiner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersDetails: async (name?: string, page?: number, pageSize?: number, search?: string, startDateBefore?: string | Date, startDateAfter?: string | Date, endDateBefore?: string | Date, endDateAfter?: string | Date, status?: 'A' | 'I' | 'F', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (startDateBefore !== undefined) {
                localVarQueryParameter['startDateBefore'] = (startDateBefore as any instanceof Date) ?
                    (startDateBefore as any).toISOString().substr(0,10) :
                    startDateBefore;
            }

            if (startDateAfter !== undefined) {
                localVarQueryParameter['startDateAfter'] = (startDateAfter as any instanceof Date) ?
                    (startDateAfter as any).toISOString().substr(0,10) :
                    startDateAfter;
            }

            if (endDateBefore !== undefined) {
                localVarQueryParameter['endDateBefore'] = (endDateBefore as any instanceof Date) ?
                    (endDateBefore as any).toISOString().substr(0,10) :
                    endDateBefore;
            }

            if (endDateAfter !== undefined) {
                localVarQueryParameter['endDateAfter'] = (endDateAfter as any instanceof Date) ?
                    (endDateAfter as any).toISOString().substr(0,10) :
                    endDateAfter;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve basic user details
         * @param {string} [name] Name of the user.
         * @param {number} [page] Page number.
         * @param {number} [pageSize] Number of users per page.
         * @param {string} [search] 
         * @param {string | Date} [startDateBefore] The date before the assigned Start Date.
         * @param {string | Date} [startDateAfter] The date after the assigned Start Date.
         * @param {string | Date} [endDateBefore] The date before the assigned End Date.
         * @param {string | Date} [endDateAfter] The date after the assigned End Date.
         * @param {'A' | 'I' | 'F'} [status] Status of the user.    A- Active User   I- Inactive User   F- Future Joiner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicUserDetails: async (name?: string, page?: number, pageSize?: number, search?: string, startDateBefore?: string | Date, startDateAfter?: string | Date, endDateBefore?: string | Date, endDateAfter?: string | Date, status?: 'A' | 'I' | 'F', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (startDateBefore !== undefined) {
                localVarQueryParameter['startDateBefore'] = (startDateBefore as any instanceof Date) ?
                    (startDateBefore as any).toISOString().substr(0,10) :
                    startDateBefore;
            }

            if (startDateAfter !== undefined) {
                localVarQueryParameter['startDateAfter'] = (startDateAfter as any instanceof Date) ?
                    (startDateAfter as any).toISOString().substr(0,10) :
                    startDateAfter;
            }

            if (endDateBefore !== undefined) {
                localVarQueryParameter['endDateBefore'] = (endDateBefore as any instanceof Date) ?
                    (endDateBefore as any).toISOString().substr(0,10) :
                    endDateBefore;
            }

            if (endDateAfter !== undefined) {
                localVarQueryParameter['endDateAfter'] = (endDateAfter as any instanceof Date) ?
                    (endDateAfter as any).toISOString().substr(0,10) :
                    endDateAfter;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/basic',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve user financial record
         * @param {string} [email] Email address of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialRecord: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/compensation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/compensation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve user financial status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/update/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/update/status',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve user basic information
         * @param {string} [email] Email of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBasicInformation: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/basic',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve user details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetails: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a user or list of users
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve user permissions and menu configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionsAndMenuConfigurations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/permissions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve users
         * @param {string} [name] Name of the user.
         * @param {number} [page] Page number.
         * @param {number} [pageSize] Number of users per page.
         * @param {string} [sortBy] 
         * @param {'asc' | 'desc'} [sortOrder] Order to sort the users.   asc- Ascending Order   desc- Descending Order 
         * @param {'A' | 'I' | 'F'} [status] Status of the user.    A- Active User   I- Inactive User   F- Future Joiner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (name?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', status?: 'A' | 'I' | 'F', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resource',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save Custom Field values
         * @summary Save Custom Field values
         * @param {string} [empId] The unique identity of the employee.
         * @param {string} [guid] The unique system generated ID of the user.
         * @param {string} [email] Email address of the user.
         * @param {Array<any>} [requestBody] Custom fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCustomFieldValues: async (empId?: string, guid?: string, email?: string, requestBody?: Array<any>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/saveCustomFieldValues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (empId !== undefined) {
                localVarQueryParameter['empId'] = empId;
            }

            if (guid !== undefined) {
                localVarQueryParameter['guid'] = guid;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/saveCustomFieldValues',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save User Address
         * @param {string} [empId] The unique identity of the employee. 
         * @param {string} [email] Email address of the user.
         * @param {PeopleAndPermissionsSaveUserAddressRequest} [peopleAndPermissionsSaveUserAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUserAddress: async (empId?: string, email?: string, peopleAndPermissionsSaveUserAddressRequest?: PeopleAndPermissionsSaveUserAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/address/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (empId !== undefined) {
                localVarQueryParameter['empId'] = empId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: peopleAndPermissionsSaveUserAddressRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/address/save',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(peopleAndPermissionsSaveUserAddressRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save User Education
         * @param {string} [empId] The unique identity of the employee. 
         * @param {string} [email] Email address of the user.
         * @param {PeopleAndPermissionsSaveUserEducationRequest} [peopleAndPermissionsSaveUserEducationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUserEducation: async (empId?: string, email?: string, peopleAndPermissionsSaveUserEducationRequest?: PeopleAndPermissionsSaveUserEducationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/education/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (empId !== undefined) {
                localVarQueryParameter['empId'] = empId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: peopleAndPermissionsSaveUserEducationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/education/save',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(peopleAndPermissionsSaveUserEducationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save User Employment
         * @param {string} [empId] The unique identity of the employee. 
         * @param {string} [email] Email address of the user.
         * @param {PeopleAndPermissionsSaveUserEmploymentRequest} [peopleAndPermissionsSaveUserEmploymentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUserEmployment: async (empId?: string, email?: string, peopleAndPermissionsSaveUserEmploymentRequest?: PeopleAndPermissionsSaveUserEmploymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/employment/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (empId !== undefined) {
                localVarQueryParameter['empId'] = empId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: peopleAndPermissionsSaveUserEmploymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/employment/save',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(peopleAndPermissionsSaveUserEmploymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update financial record of User
         * @param {string} guid 
         * @param {string} value 
         * @param {'sal' | 'pay' | 'bonus' | 'INCTV' | 'SVRC' | 'other'} compensationType Type of compensation.   sal - Salary, pay - , INCTV - Incentive, SVCR - Severance
         * @param {string} currencyCode 
         * @param {'HRLY' | 'DLY' | 'WKLY' | 'BWKLY' | 'MTHLY' | 'BMTH' | 'QTRLY' | 'BYRLY' | 'YRLY' | 'ONEF'} period Time period for compensation.   HRLY - Hourly, DLY - Daily, WKLY - Weekly,  BWKLY - Bi-Weekly, MTHLY - Monthly, BMTH - Bi-Monthly, QTRLY - Quarterly, BYRLY - Bi-Yearly, YRLY - Yearly,   ONEF - OneOff
         * @param {'ACTV' | 'ARCHV' | 'PVNL'} status Status of compensation.   ACTV - Active, ARCHV - Archive, PVNL - Provisional
         * @param {string | Date} [effectivedate] 
         * @param {string | Date} [enddate] 
         * @param {string} [notes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFinancialRecord: async (guid: string, value: string, compensationType: 'sal' | 'pay' | 'bonus' | 'INCTV' | 'SVRC' | 'other', currencyCode: string, period: 'HRLY' | 'DLY' | 'WKLY' | 'BWKLY' | 'MTHLY' | 'BMTH' | 'QTRLY' | 'BYRLY' | 'YRLY' | 'ONEF', status: 'ACTV' | 'ARCHV' | 'PVNL', effectivedate?: string | Date, enddate?: string | Date, notes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('updateFinancialRecord', 'guid', guid)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('updateFinancialRecord', 'value', value)
            // verify required parameter 'compensationType' is not null or undefined
            assertParamExists('updateFinancialRecord', 'compensationType', compensationType)
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('updateFinancialRecord', 'currencyCode', currencyCode)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('updateFinancialRecord', 'period', period)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateFinancialRecord', 'status', status)
            const localVarPath = `/api/user/compensation/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (guid !== undefined) {
                localVarQueryParameter['guid'] = guid;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (compensationType !== undefined) {
                localVarQueryParameter['compensationType'] = compensationType;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (effectivedate !== undefined) {
                localVarQueryParameter['effectivedate'] = (effectivedate as any instanceof Date) ?
                    (effectivedate as any).toISOString().substr(0,10) :
                    effectivedate;
            }

            if (enddate !== undefined) {
                localVarQueryParameter['enddate'] = (enddate as any instanceof Date) ?
                    (enddate as any).toISOString().substr(0,10) :
                    enddate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (notes !== undefined) {
                localVarQueryParameter['notes'] = notes;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/compensation/update',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user
         * @param {string} [guid] The unique system generated ID of the user.
         * @param {string} [email] Email address of the user.
         * @param {string} [empId] Employee ID of the user.   To update the employee ID, you need admin access.
         * @param {string} [firstName] First name of the user.
         * @param {string} [middleName] Last name of the user.
         * @param {string} [lastName] Last name of the user.
         * @param {string} [secondLastName] Second last name of the user.
         * @param {string} [displayFullName] Display name of the user.
         * @param {string} [cellPhone] Cell phone of the user.
         * @param {string} [phone] Phone number of the user.
         * @param {string} [familySuffix] Family suffix of the user.
         * @param {string | Date} [userDateOfBirth] Date of birth of the user.
         * @param {string} [jobGrade] Job grade of the user.
         * @param {string | Date} [userStartDate] Starting date of the user.
         * @param {string | Date} [userEndDate] End date of the user.
         * @param {string} [gender] Gender of the user.
         * @param {string} [position] Position of the user.
         * @param {string} [profileId] Profile ID of the user.
         * @param {string} [shortName] Short name of the user.
         * @param {'A' | 'I' | 'F'} [status] Status of the user.
         * @param {string} [locationName] Location of the user.
         * @param {string} [locationId] Location ID of user location.
         * @param {string} [notes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (guid?: string, email?: string, empId?: string, firstName?: string, middleName?: string, lastName?: string, secondLastName?: string, displayFullName?: string, cellPhone?: string, phone?: string, familySuffix?: string, userDateOfBirth?: string | Date, jobGrade?: string, userStartDate?: string | Date, userEndDate?: string | Date, gender?: string, position?: string, profileId?: string, shortName?: string, status?: 'A' | 'I' | 'F', locationName?: string, locationId?: string, notes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (guid !== undefined) {
                localVarQueryParameter['guid'] = guid;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (empId !== undefined) {
                localVarQueryParameter['empId'] = empId;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middleName'] = middleName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (secondLastName !== undefined) {
                localVarQueryParameter['secondLastName'] = secondLastName;
            }

            if (displayFullName !== undefined) {
                localVarQueryParameter['displayFullName'] = displayFullName;
            }

            if (cellPhone !== undefined) {
                localVarQueryParameter['cellPhone'] = cellPhone;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }

            if (familySuffix !== undefined) {
                localVarQueryParameter['familySuffix'] = familySuffix;
            }

            if (userDateOfBirth !== undefined) {
                localVarQueryParameter['userDateOfBirth'] = (userDateOfBirth as any instanceof Date) ?
                    (userDateOfBirth as any).toISOString().substr(0,10) :
                    userDateOfBirth;
            }

            if (jobGrade !== undefined) {
                localVarQueryParameter['jobGrade'] = jobGrade;
            }

            if (userStartDate !== undefined) {
                localVarQueryParameter['userStartDate'] = (userStartDate as any instanceof Date) ?
                    (userStartDate as any).toISOString().substr(0,10) :
                    userStartDate;
            }

            if (userEndDate !== undefined) {
                localVarQueryParameter['userEndDate'] = (userEndDate as any instanceof Date) ?
                    (userEndDate as any).toISOString().substr(0,10) :
                    userEndDate;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (position !== undefined) {
                localVarQueryParameter['position'] = position;
            }

            if (profileId !== undefined) {
                localVarQueryParameter['profileId'] = profileId;
            }

            if (shortName !== undefined) {
                localVarQueryParameter['shortName'] = shortName;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (locationName !== undefined) {
                localVarQueryParameter['locationName'] = locationName;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (notes !== undefined) {
                localVarQueryParameter['notes'] = notes;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/update',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  
         * @summary Upload user profile
         * @param {Uint8Array | File | buffer.File} file Upload the profile picture here.
         * @param {string} userid The ID of the user whose profile picture has to be updated.
         * @param {PeopleAndPermissionsUploadUserProfilePictureRequest} [peopleAndPermissionsUploadUserProfilePictureRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadUserProfilePicture: async (file: Uint8Array | File | buffer.File, userid: string, peopleAndPermissionsUploadUserProfilePictureRequest?: PeopleAndPermissionsUploadUserProfilePictureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadUserProfilePicture', 'file', file)
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('uploadUserProfilePicture', 'userid', userid)
            const localVarPath = `/api/user/uploadpicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
            if (userid !== undefined) {
                await addFormParam('userid', userid, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: peopleAndPermissionsUploadUserProfilePictureRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/user/uploadpicture',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeopleAndPermissionsApi - functional programming interface
 * @export
 */
export const PeopleAndPermissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeopleAndPermissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add reports to
         * @param {PeopleAndPermissionsApiAddReportsToRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addReportsTo(requestParameters: PeopleAndPermissionsApiAddReportsToRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleAndPermissionsAddReportsToResponse>> {
            const peopleAndPermissionsAddReportsToRequest: PeopleAndPermissionsAddReportsToRequest = {
                Add Objects: requestParameters.Add Objects
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addReportsTo(requestParameters.empId, requestParameters.email, peopleAndPermissionsAddReportsToRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create or Update user
         * @param {PeopleAndPermissionsApiCreateOrUpdateUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateUserDetails(requestParameters: PeopleAndPermissionsApiCreateOrUpdateUserDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const peopleAndPermissionsCreateOrUpdateUserDetailsRequest: PeopleAndPermissionsCreateOrUpdateUserDetailsRequest = {
                firstName: requestParameters.firstName,
                email: requestParameters.email,
                lastName: requestParameters.lastName,
                empId: requestParameters.empId,
                gender: requestParameters.gender,
                guid: requestParameters.guid,
                status: requestParameters.status,
                displayFullName: requestParameters.displayFullName,
                middleName: requestParameters.middleName,
                secondLastName: requestParameters.secondLastName,
                shortName: requestParameters.shortName,
                namePronunciation: requestParameters.namePronunciation,
                familySuffix: requestParameters.familySuffix,
                workerType: requestParameters.workerType,
                userDateOfBirth: requestParameters.userDateOfBirth,
                phone: requestParameters.phone,
                cellPhone: requestParameters.cellPhone,
                position: requestParameters.position,
                departmentID: requestParameters.departmentID,
                locationId: requestParameters.locationId,
                locationName: requestParameters.locationName,
                userStartDate: requestParameters.userStartDate,
                reportsToEmail: requestParameters.reportsToEmail,
                addressList: requestParameters.addressList,
                educationList: requestParameters.educationList,
                contactList: requestParameters.contactList,
                financialList: requestParameters.financialList,
                customFieldValues: requestParameters.customFieldValues
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdateUserDetails(peopleAndPermissionsCreateOrUpdateUserDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create user
         * @param {PeopleAndPermissionsApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(requestParameters: PeopleAndPermissionsApiCreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(requestParameters.firstName, requestParameters.email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create compensation for user
         * @param {PeopleAndPermissionsApiCreateUserCompensationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserCompensation(requestParameters: PeopleAndPermissionsApiCreateUserCompensationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserCompensation(requestParameters.value, requestParameters.compensationType, requestParameters.currencyCode, requestParameters.period, requestParameters.effectivedate, requestParameters.status, requestParameters.enddate, requestParameters.notes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete User Address
         * @param {PeopleAndPermissionsApiDeleteUserAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserAddress(requestParameters: PeopleAndPermissionsApiDeleteUserAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleAndPermissionsDeleteUserAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserAddress(requestParameters.addressId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete User Education
         * @param {PeopleAndPermissionsApiDeleteUserEducationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserEducation(requestParameters: PeopleAndPermissionsApiDeleteUserEducationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserEducation(requestParameters.educationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes User Employment
         * @param {PeopleAndPermissionsApiDeleteUserEmploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserEmployment(requestParameters: PeopleAndPermissionsApiDeleteUserEmploymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleAndPermissionsDeleteUserEmploymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserEmployment(requestParameters.empid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve all users details
         * @param {PeopleAndPermissionsApiGetAllUsersDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsersDetails(requestParameters: PeopleAndPermissionsApiGetAllUsersDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PeopleAndPermissionsGetAllUsersDetailsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsersDetails(requestParameters.name, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.startDateBefore, requestParameters.startDateAfter, requestParameters.endDateBefore, requestParameters.endDateAfter, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve basic user details
         * @param {PeopleAndPermissionsApiGetBasicUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicUserDetails(requestParameters: PeopleAndPermissionsApiGetBasicUserDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PeopleAndPermissionsGetBasicUserDetailsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicUserDetails(requestParameters.name, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.startDateBefore, requestParameters.startDateAfter, requestParameters.endDateBefore, requestParameters.endDateAfter, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve user financial record
         * @param {PeopleAndPermissionsApiGetFinancialRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialRecord(requestParameters: PeopleAndPermissionsApiGetFinancialRecordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialRecord(requestParameters.email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve user financial status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve user basic information
         * @param {PeopleAndPermissionsApiGetUserBasicInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserBasicInformation(requestParameters: PeopleAndPermissionsApiGetUserBasicInformationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserBasicInformation(requestParameters.email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve user details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDetails(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDetails(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a user or list of users
         * @param {PeopleAndPermissionsApiGetUserListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserList(requestParameters: PeopleAndPermissionsApiGetUserListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserList(requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve user permissions and menu configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPermissionsAndMenuConfigurations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPermissionsAndMenuConfigurations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve users
         * @param {PeopleAndPermissionsApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(requestParameters: PeopleAndPermissionsApiGetUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleAndPermissionsGetUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(requestParameters.name, requestParameters.page, requestParameters.pageSize, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save Custom Field values
         * @summary Save Custom Field values
         * @param {PeopleAndPermissionsApiSaveCustomFieldValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveCustomFieldValues(requestParameters: PeopleAndPermissionsApiSaveCustomFieldValuesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleAndPermissionsSaveCustomFieldValuesResponse>> {
            const requestBody: Array<any> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveCustomFieldValues(requestParameters.empId, requestParameters.guid, requestParameters.email, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save User Address
         * @param {PeopleAndPermissionsApiSaveUserAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUserAddress(requestParameters: PeopleAndPermissionsApiSaveUserAddressRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleAndPermissionsSaveUserAddressResponse>> {
            const peopleAndPermissionsSaveUserAddressRequest: PeopleAndPermissionsSaveUserAddressRequest = {
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUserAddress(requestParameters.empId, requestParameters.email, peopleAndPermissionsSaveUserAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save User Education
         * @param {PeopleAndPermissionsApiSaveUserEducationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUserEducation(requestParameters: PeopleAndPermissionsApiSaveUserEducationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const peopleAndPermissionsSaveUserEducationRequest: PeopleAndPermissionsSaveUserEducationRequest = {
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUserEducation(requestParameters.empId, requestParameters.email, peopleAndPermissionsSaveUserEducationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save User Employment
         * @param {PeopleAndPermissionsApiSaveUserEmploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUserEmployment(requestParameters: PeopleAndPermissionsApiSaveUserEmploymentRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const peopleAndPermissionsSaveUserEmploymentRequest: PeopleAndPermissionsSaveUserEmploymentRequest = {
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUserEmployment(requestParameters.empId, requestParameters.email, peopleAndPermissionsSaveUserEmploymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update financial record of User
         * @param {PeopleAndPermissionsApiUpdateFinancialRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFinancialRecord(requestParameters: PeopleAndPermissionsApiUpdateFinancialRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFinancialRecord(requestParameters.guid, requestParameters.value, requestParameters.compensationType, requestParameters.currencyCode, requestParameters.period, requestParameters.status, requestParameters.effectivedate, requestParameters.enddate, requestParameters.notes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user
         * @param {PeopleAndPermissionsApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(requestParameters: PeopleAndPermissionsApiUpdateUserRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(requestParameters.guid, requestParameters.email, requestParameters.empId, requestParameters.firstName, requestParameters.middleName, requestParameters.lastName, requestParameters.secondLastName, requestParameters.displayFullName, requestParameters.cellPhone, requestParameters.phone, requestParameters.familySuffix, requestParameters.userDateOfBirth, requestParameters.jobGrade, requestParameters.userStartDate, requestParameters.userEndDate, requestParameters.gender, requestParameters.position, requestParameters.profileId, requestParameters.shortName, requestParameters.status, requestParameters.locationName, requestParameters.locationId, requestParameters.notes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  
         * @summary Upload user profile
         * @param {PeopleAndPermissionsApiUploadUserProfilePictureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadUserProfilePicture(requestParameters: PeopleAndPermissionsApiUploadUserProfilePictureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleAndPermissionsUploadUserProfilePictureResponse>> {
            const peopleAndPermissionsUploadUserProfilePictureRequest: PeopleAndPermissionsUploadUserProfilePictureRequest = {
                file: requestParameters.file,
                userid: requestParameters.userid
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadUserProfilePicture(requestParameters.file, requestParameters.userid, peopleAndPermissionsUploadUserProfilePictureRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PeopleAndPermissionsApi - factory interface
 * @export
 */
export const PeopleAndPermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeopleAndPermissionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add reports to
         * @param {PeopleAndPermissionsApiAddReportsToRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReportsTo(requestParameters: PeopleAndPermissionsApiAddReportsToRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PeopleAndPermissionsAddReportsToResponse> {
            return localVarFp.addReportsTo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create or Update user
         * @param {PeopleAndPermissionsApiCreateOrUpdateUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateUserDetails(requestParameters: PeopleAndPermissionsApiCreateOrUpdateUserDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createOrUpdateUserDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create user
         * @param {PeopleAndPermissionsApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: PeopleAndPermissionsApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create compensation for user
         * @param {PeopleAndPermissionsApiCreateUserCompensationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserCompensation(requestParameters: PeopleAndPermissionsApiCreateUserCompensationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createUserCompensation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User Address
         * @param {PeopleAndPermissionsApiDeleteUserAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAddress(requestParameters: PeopleAndPermissionsApiDeleteUserAddressRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleAndPermissionsDeleteUserAddressResponse> {
            return localVarFp.deleteUserAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User Education
         * @param {PeopleAndPermissionsApiDeleteUserEducationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserEducation(requestParameters: PeopleAndPermissionsApiDeleteUserEducationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteUserEducation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes User Employment
         * @param {PeopleAndPermissionsApiDeleteUserEmploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserEmployment(requestParameters: PeopleAndPermissionsApiDeleteUserEmploymentRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleAndPermissionsDeleteUserEmploymentResponse> {
            return localVarFp.deleteUserEmployment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all users details
         * @param {PeopleAndPermissionsApiGetAllUsersDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersDetails(requestParameters: PeopleAndPermissionsApiGetAllUsersDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<PeopleAndPermissionsGetAllUsersDetailsResponseInner>> {
            return localVarFp.getAllUsersDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve basic user details
         * @param {PeopleAndPermissionsApiGetBasicUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicUserDetails(requestParameters: PeopleAndPermissionsApiGetBasicUserDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<PeopleAndPermissionsGetBasicUserDetailsResponseInner>> {
            return localVarFp.getBasicUserDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve user financial record
         * @param {PeopleAndPermissionsApiGetFinancialRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialRecord(requestParameters: PeopleAndPermissionsApiGetFinancialRecordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getFinancialRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve user financial status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialStatus(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getFinancialStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve user basic information
         * @param {PeopleAndPermissionsApiGetUserBasicInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBasicInformation(requestParameters: PeopleAndPermissionsApiGetUserBasicInformationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUserBasicInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve user details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetails(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUserDetails(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a user or list of users
         * @param {PeopleAndPermissionsApiGetUserListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList(requestParameters: PeopleAndPermissionsApiGetUserListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUserList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve user permissions and menu configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionsAndMenuConfigurations(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUserPermissionsAndMenuConfigurations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve users
         * @param {PeopleAndPermissionsApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(requestParameters: PeopleAndPermissionsApiGetUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PeopleAndPermissionsGetUsersResponse> {
            return localVarFp.getUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Save Custom Field values
         * @summary Save Custom Field values
         * @param {PeopleAndPermissionsApiSaveCustomFieldValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCustomFieldValues(requestParameters: PeopleAndPermissionsApiSaveCustomFieldValuesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PeopleAndPermissionsSaveCustomFieldValuesResponse> {
            return localVarFp.saveCustomFieldValues(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save User Address
         * @param {PeopleAndPermissionsApiSaveUserAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUserAddress(requestParameters: PeopleAndPermissionsApiSaveUserAddressRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PeopleAndPermissionsSaveUserAddressResponse> {
            return localVarFp.saveUserAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save User Education
         * @param {PeopleAndPermissionsApiSaveUserEducationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUserEducation(requestParameters: PeopleAndPermissionsApiSaveUserEducationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.saveUserEducation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save User Employment
         * @param {PeopleAndPermissionsApiSaveUserEmploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUserEmployment(requestParameters: PeopleAndPermissionsApiSaveUserEmploymentRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.saveUserEmployment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update financial record of User
         * @param {PeopleAndPermissionsApiUpdateFinancialRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFinancialRecord(requestParameters: PeopleAndPermissionsApiUpdateFinancialRecordRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateFinancialRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user
         * @param {PeopleAndPermissionsApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: PeopleAndPermissionsApiUpdateUserRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  
         * @summary Upload user profile
         * @param {PeopleAndPermissionsApiUploadUserProfilePictureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadUserProfilePicture(requestParameters: PeopleAndPermissionsApiUploadUserProfilePictureRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleAndPermissionsUploadUserProfilePictureResponse> {
            return localVarFp.uploadUserProfilePicture(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addReportsTo operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiAddReportsToRequest
 */
export type PeopleAndPermissionsApiAddReportsToRequest = {
    
    /**
    * The unique identity of the employee. 
    * @type {string}
    * @memberof PeopleAndPermissionsApiAddReportsTo
    */
    readonly empId?: string
    
    /**
    * Email address of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiAddReportsTo
    */
    readonly email?: string
    
} & PeopleAndPermissionsAddReportsToRequest

/**
 * Request parameters for createOrUpdateUserDetails operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiCreateOrUpdateUserDetailsRequest
 */
export type PeopleAndPermissionsApiCreateOrUpdateUserDetailsRequest = {
    
} & PeopleAndPermissionsCreateOrUpdateUserDetailsRequest

/**
 * Request parameters for createUser operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiCreateUserRequest
 */
export type PeopleAndPermissionsApiCreateUserRequest = {
    
    /**
    * First name of user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiCreateUser
    */
    readonly firstName: string
    
    /**
    * Mail ID of user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiCreateUser
    */
    readonly email: string
    
}

/**
 * Request parameters for createUserCompensation operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiCreateUserCompensationRequest
 */
export type PeopleAndPermissionsApiCreateUserCompensationRequest = {
    
    /**
    * Value of compensation
    * @type {string}
    * @memberof PeopleAndPermissionsApiCreateUserCompensation
    */
    readonly value: string
    
    /**
    * Type of compensation.   sal - Salary, pay - , INCTV - Incentive, SVCR - Severance
    * @type {'sal' | 'pay' | 'bonus' | 'INCTV' | 'SVRC' | 'other'}
    * @memberof PeopleAndPermissionsApiCreateUserCompensation
    */
    readonly compensationType: 'sal' | 'pay' | 'bonus' | 'INCTV' | 'SVRC' | 'other'
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiCreateUserCompensation
    */
    readonly currencyCode: string
    
    /**
    * Time period for compensation.   HRLY - Hourly, DLY - Daily, WKLY - Weekly,  BWKLY - Bi-Weekly, MTHLY - Monthly, BMTH - Bi-Monthly, QTRLY - Quarterly, BYRLY - Bi-Yearly, YRLY - Yearly,   ONEF - OneOff
    * @type {'HRLY' | 'DLY' | 'WKLY' | 'BWKLY' | 'MTHLY' | 'BMTH' | 'QTRLY' | 'BYRLY' | 'YRLY' | 'ONEF'}
    * @memberof PeopleAndPermissionsApiCreateUserCompensation
    */
    readonly period: 'HRLY' | 'DLY' | 'WKLY' | 'BWKLY' | 'MTHLY' | 'BMTH' | 'QTRLY' | 'BYRLY' | 'YRLY' | 'ONEF'
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiCreateUserCompensation
    */
    readonly effectivedate: string
    
    /**
    * Status of compensation.   ACTV - Active, ARCHV - Archive, PVNL - Provisional
    * @type {'ACTV' | 'ARCHV' | 'PVNL'}
    * @memberof PeopleAndPermissionsApiCreateUserCompensation
    */
    readonly status: 'ACTV' | 'ARCHV' | 'PVNL'
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiCreateUserCompensation
    */
    readonly enddate?: string
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiCreateUserCompensation
    */
    readonly notes?: string
    
}

/**
 * Request parameters for deleteUserAddress operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiDeleteUserAddressRequest
 */
export type PeopleAndPermissionsApiDeleteUserAddressRequest = {
    
    /**
    * The unique ID of the address.
    * @type {string}
    * @memberof PeopleAndPermissionsApiDeleteUserAddress
    */
    readonly addressId: string
    
}

/**
 * Request parameters for deleteUserEducation operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiDeleteUserEducationRequest
 */
export type PeopleAndPermissionsApiDeleteUserEducationRequest = {
    
    /**
    * Education ID the user
    * @type {string}
    * @memberof PeopleAndPermissionsApiDeleteUserEducation
    */
    readonly educationId: string
    
}

/**
 * Request parameters for deleteUserEmployment operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiDeleteUserEmploymentRequest
 */
export type PeopleAndPermissionsApiDeleteUserEmploymentRequest = {
    
    /**
    * The unique identity of the employee. 
    * @type {number}
    * @memberof PeopleAndPermissionsApiDeleteUserEmployment
    */
    readonly empid: number
    
}

/**
 * Request parameters for getAllUsersDetails operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiGetAllUsersDetailsRequest
 */
export type PeopleAndPermissionsApiGetAllUsersDetailsRequest = {
    
    /**
    * Name of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiGetAllUsersDetails
    */
    readonly name?: string
    
    /**
    * Page number.
    * @type {number}
    * @memberof PeopleAndPermissionsApiGetAllUsersDetails
    */
    readonly page?: number
    
    /**
    * Number of users per page.
    * @type {number}
    * @memberof PeopleAndPermissionsApiGetAllUsersDetails
    */
    readonly pageSize?: number
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiGetAllUsersDetails
    */
    readonly search?: string
    
    /**
    * The date before the assigned Start Date.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiGetAllUsersDetails
    */
    readonly startDateBefore?: string | Date
    
    /**
    * The date after the assigned Start Date.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiGetAllUsersDetails
    */
    readonly startDateAfter?: string | Date
    
    /**
    * The date before the assigned End Date.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiGetAllUsersDetails
    */
    readonly endDateBefore?: string | Date
    
    /**
    * The date after the assigned End Date.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiGetAllUsersDetails
    */
    readonly endDateAfter?: string | Date
    
    /**
    * Status of the user.    A- Active User   I- Inactive User   F- Future Joiner 
    * @type {'A' | 'I' | 'F'}
    * @memberof PeopleAndPermissionsApiGetAllUsersDetails
    */
    readonly status?: 'A' | 'I' | 'F'
    
}

/**
 * Request parameters for getBasicUserDetails operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiGetBasicUserDetailsRequest
 */
export type PeopleAndPermissionsApiGetBasicUserDetailsRequest = {
    
    /**
    * Name of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiGetBasicUserDetails
    */
    readonly name?: string
    
    /**
    * Page number.
    * @type {number}
    * @memberof PeopleAndPermissionsApiGetBasicUserDetails
    */
    readonly page?: number
    
    /**
    * Number of users per page.
    * @type {number}
    * @memberof PeopleAndPermissionsApiGetBasicUserDetails
    */
    readonly pageSize?: number
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiGetBasicUserDetails
    */
    readonly search?: string
    
    /**
    * The date before the assigned Start Date.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiGetBasicUserDetails
    */
    readonly startDateBefore?: string | Date
    
    /**
    * The date after the assigned Start Date.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiGetBasicUserDetails
    */
    readonly startDateAfter?: string | Date
    
    /**
    * The date before the assigned End Date.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiGetBasicUserDetails
    */
    readonly endDateBefore?: string | Date
    
    /**
    * The date after the assigned End Date.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiGetBasicUserDetails
    */
    readonly endDateAfter?: string | Date
    
    /**
    * Status of the user.    A- Active User   I- Inactive User   F- Future Joiner 
    * @type {'A' | 'I' | 'F'}
    * @memberof PeopleAndPermissionsApiGetBasicUserDetails
    */
    readonly status?: 'A' | 'I' | 'F'
    
}

/**
 * Request parameters for getFinancialRecord operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiGetFinancialRecordRequest
 */
export type PeopleAndPermissionsApiGetFinancialRecordRequest = {
    
    /**
    * Email address of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiGetFinancialRecord
    */
    readonly email?: string
    
}

/**
 * Request parameters for getUserBasicInformation operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiGetUserBasicInformationRequest
 */
export type PeopleAndPermissionsApiGetUserBasicInformationRequest = {
    
    /**
    * Email of user
    * @type {string}
    * @memberof PeopleAndPermissionsApiGetUserBasicInformation
    */
    readonly email?: string
    
}

/**
 * Request parameters for getUserList operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiGetUserListRequest
 */
export type PeopleAndPermissionsApiGetUserListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiGetUserList
    */
    readonly name?: string
    
}

/**
 * Request parameters for getUsers operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiGetUsersRequest
 */
export type PeopleAndPermissionsApiGetUsersRequest = {
    
    /**
    * Name of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiGetUsers
    */
    readonly name?: string
    
    /**
    * Page number.
    * @type {number}
    * @memberof PeopleAndPermissionsApiGetUsers
    */
    readonly page?: number
    
    /**
    * Number of users per page.
    * @type {number}
    * @memberof PeopleAndPermissionsApiGetUsers
    */
    readonly pageSize?: number
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiGetUsers
    */
    readonly sortBy?: string
    
    /**
    * Order to sort the users.   asc- Ascending Order   desc- Descending Order 
    * @type {'asc' | 'desc'}
    * @memberof PeopleAndPermissionsApiGetUsers
    */
    readonly sortOrder?: 'asc' | 'desc'
    
    /**
    * Status of the user.    A- Active User   I- Inactive User   F- Future Joiner 
    * @type {'A' | 'I' | 'F'}
    * @memberof PeopleAndPermissionsApiGetUsers
    */
    readonly status?: 'A' | 'I' | 'F'
    
}

/**
 * Request parameters for saveCustomFieldValues operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiSaveCustomFieldValuesRequest
 */
export type PeopleAndPermissionsApiSaveCustomFieldValuesRequest = {
    
    /**
    * The unique identity of the employee.
    * @type {string}
    * @memberof PeopleAndPermissionsApiSaveCustomFieldValues
    */
    readonly empId?: string
    
    /**
    * The unique system generated ID of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiSaveCustomFieldValues
    */
    readonly guid?: string
    
    /**
    * Email address of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiSaveCustomFieldValues
    */
    readonly email?: string
    
}Array<any>

/**
 * Request parameters for saveUserAddress operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiSaveUserAddressRequest
 */
export type PeopleAndPermissionsApiSaveUserAddressRequest = {
    
    /**
    * The unique identity of the employee. 
    * @type {string}
    * @memberof PeopleAndPermissionsApiSaveUserAddress
    */
    readonly empId?: string
    
    /**
    * Email address of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiSaveUserAddress
    */
    readonly email?: string
    
} & PeopleAndPermissionsSaveUserAddressRequest

/**
 * Request parameters for saveUserEducation operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiSaveUserEducationRequest
 */
export type PeopleAndPermissionsApiSaveUserEducationRequest = {
    
    /**
    * The unique identity of the employee. 
    * @type {string}
    * @memberof PeopleAndPermissionsApiSaveUserEducation
    */
    readonly empId?: string
    
    /**
    * Email address of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiSaveUserEducation
    */
    readonly email?: string
    
} & PeopleAndPermissionsSaveUserEducationRequest

/**
 * Request parameters for saveUserEmployment operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiSaveUserEmploymentRequest
 */
export type PeopleAndPermissionsApiSaveUserEmploymentRequest = {
    
    /**
    * The unique identity of the employee. 
    * @type {string}
    * @memberof PeopleAndPermissionsApiSaveUserEmployment
    */
    readonly empId?: string
    
    /**
    * Email address of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiSaveUserEmployment
    */
    readonly email?: string
    
} & PeopleAndPermissionsSaveUserEmploymentRequest

/**
 * Request parameters for updateFinancialRecord operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiUpdateFinancialRecordRequest
 */
export type PeopleAndPermissionsApiUpdateFinancialRecordRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateFinancialRecord
    */
    readonly guid: string
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateFinancialRecord
    */
    readonly value: string
    
    /**
    * Type of compensation.   sal - Salary, pay - , INCTV - Incentive, SVCR - Severance
    * @type {'sal' | 'pay' | 'bonus' | 'INCTV' | 'SVRC' | 'other'}
    * @memberof PeopleAndPermissionsApiUpdateFinancialRecord
    */
    readonly compensationType: 'sal' | 'pay' | 'bonus' | 'INCTV' | 'SVRC' | 'other'
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateFinancialRecord
    */
    readonly currencyCode: string
    
    /**
    * Time period for compensation.   HRLY - Hourly, DLY - Daily, WKLY - Weekly,  BWKLY - Bi-Weekly, MTHLY - Monthly, BMTH - Bi-Monthly, QTRLY - Quarterly, BYRLY - Bi-Yearly, YRLY - Yearly,   ONEF - OneOff
    * @type {'HRLY' | 'DLY' | 'WKLY' | 'BWKLY' | 'MTHLY' | 'BMTH' | 'QTRLY' | 'BYRLY' | 'YRLY' | 'ONEF'}
    * @memberof PeopleAndPermissionsApiUpdateFinancialRecord
    */
    readonly period: 'HRLY' | 'DLY' | 'WKLY' | 'BWKLY' | 'MTHLY' | 'BMTH' | 'QTRLY' | 'BYRLY' | 'YRLY' | 'ONEF'
    
    /**
    * Status of compensation.   ACTV - Active, ARCHV - Archive, PVNL - Provisional
    * @type {'ACTV' | 'ARCHV' | 'PVNL'}
    * @memberof PeopleAndPermissionsApiUpdateFinancialRecord
    */
    readonly status: 'ACTV' | 'ARCHV' | 'PVNL'
    
    /**
    * 
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiUpdateFinancialRecord
    */
    readonly effectivedate?: string | Date
    
    /**
    * 
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiUpdateFinancialRecord
    */
    readonly enddate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateFinancialRecord
    */
    readonly notes?: string
    
}

/**
 * Request parameters for updateUser operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiUpdateUserRequest
 */
export type PeopleAndPermissionsApiUpdateUserRequest = {
    
    /**
    * The unique system generated ID of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly guid?: string
    
    /**
    * Email address of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly email?: string
    
    /**
    * Employee ID of the user.   To update the employee ID, you need admin access.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly empId?: string
    
    /**
    * First name of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly firstName?: string
    
    /**
    * Last name of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly middleName?: string
    
    /**
    * Last name of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly lastName?: string
    
    /**
    * Second last name of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly secondLastName?: string
    
    /**
    * Display name of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly displayFullName?: string
    
    /**
    * Cell phone of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly cellPhone?: string
    
    /**
    * Phone number of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly phone?: string
    
    /**
    * Family suffix of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly familySuffix?: string
    
    /**
    * Date of birth of the user.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly userDateOfBirth?: string | Date
    
    /**
    * Job grade of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly jobGrade?: string
    
    /**
    * Starting date of the user.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly userStartDate?: string | Date
    
    /**
    * End date of the user.
    * @type {string | Date}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly userEndDate?: string | Date
    
    /**
    * Gender of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly gender?: string
    
    /**
    * Position of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly position?: string
    
    /**
    * Profile ID of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly profileId?: string
    
    /**
    * Short name of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly shortName?: string
    
    /**
    * Status of the user.
    * @type {'A' | 'I' | 'F'}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly status?: 'A' | 'I' | 'F'
    
    /**
    * Location of the user.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly locationName?: string
    
    /**
    * Location ID of user location.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly locationId?: string
    
    /**
    * 
    * @type {string}
    * @memberof PeopleAndPermissionsApiUpdateUser
    */
    readonly notes?: string
    
}

/**
 * Request parameters for uploadUserProfilePicture operation in PeopleAndPermissionsApi.
 * @export
 * @interface PeopleAndPermissionsApiUploadUserProfilePictureRequest
 */
export type PeopleAndPermissionsApiUploadUserProfilePictureRequest = {
    
    /**
    * Upload the profile picture here.
    * @type {Uint8Array | File | buffer.File}
    * @memberof PeopleAndPermissionsApiUploadUserProfilePicture
    */
    readonly file: Uint8Array | File | buffer.File
    
    /**
    * The ID of the user whose profile picture has to be updated.
    * @type {string}
    * @memberof PeopleAndPermissionsApiUploadUserProfilePicture
    */
    readonly userid: string
    
} & PeopleAndPermissionsUploadUserProfilePictureRequest

/**
 * PeopleAndPermissionsApiGenerated - object-oriented interface
 * @export
 * @class PeopleAndPermissionsApiGenerated
 * @extends {BaseAPI}
 */
export class PeopleAndPermissionsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add reports to
     * @param {PeopleAndPermissionsApiAddReportsToRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public addReportsTo(requestParameters: PeopleAndPermissionsApiAddReportsToRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).addReportsTo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create or Update user
     * @param {PeopleAndPermissionsApiCreateOrUpdateUserDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public createOrUpdateUserDetails(requestParameters: PeopleAndPermissionsApiCreateOrUpdateUserDetailsRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).createOrUpdateUserDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create user
     * @param {PeopleAndPermissionsApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public createUser(requestParameters: PeopleAndPermissionsApiCreateUserRequest, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).createUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create compensation for user
     * @param {PeopleAndPermissionsApiCreateUserCompensationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public createUserCompensation(requestParameters: PeopleAndPermissionsApiCreateUserCompensationRequest, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).createUserCompensation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User Address
     * @param {PeopleAndPermissionsApiDeleteUserAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public deleteUserAddress(requestParameters: PeopleAndPermissionsApiDeleteUserAddressRequest, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).deleteUserAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User Education
     * @param {PeopleAndPermissionsApiDeleteUserEducationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public deleteUserEducation(requestParameters: PeopleAndPermissionsApiDeleteUserEducationRequest, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).deleteUserEducation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes User Employment
     * @param {PeopleAndPermissionsApiDeleteUserEmploymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public deleteUserEmployment(requestParameters: PeopleAndPermissionsApiDeleteUserEmploymentRequest, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).deleteUserEmployment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all users details
     * @param {PeopleAndPermissionsApiGetAllUsersDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public getAllUsersDetails(requestParameters: PeopleAndPermissionsApiGetAllUsersDetailsRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).getAllUsersDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve basic user details
     * @param {PeopleAndPermissionsApiGetBasicUserDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public getBasicUserDetails(requestParameters: PeopleAndPermissionsApiGetBasicUserDetailsRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).getBasicUserDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve user financial record
     * @param {PeopleAndPermissionsApiGetFinancialRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public getFinancialRecord(requestParameters: PeopleAndPermissionsApiGetFinancialRecordRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).getFinancialRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve user financial status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public getFinancialStatus(options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).getFinancialStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve user basic information
     * @param {PeopleAndPermissionsApiGetUserBasicInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public getUserBasicInformation(requestParameters: PeopleAndPermissionsApiGetUserBasicInformationRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).getUserBasicInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve user details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public getUserDetails(options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).getUserDetails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a user or list of users
     * @param {PeopleAndPermissionsApiGetUserListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public getUserList(requestParameters: PeopleAndPermissionsApiGetUserListRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).getUserList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve user permissions and menu configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public getUserPermissionsAndMenuConfigurations(options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).getUserPermissionsAndMenuConfigurations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve users
     * @param {PeopleAndPermissionsApiGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public getUsers(requestParameters: PeopleAndPermissionsApiGetUsersRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).getUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save Custom Field values
     * @summary Save Custom Field values
     * @param {PeopleAndPermissionsApiSaveCustomFieldValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public saveCustomFieldValues(requestParameters: PeopleAndPermissionsApiSaveCustomFieldValuesRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).saveCustomFieldValues(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save User Address
     * @param {PeopleAndPermissionsApiSaveUserAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public saveUserAddress(requestParameters: PeopleAndPermissionsApiSaveUserAddressRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).saveUserAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save User Education
     * @param {PeopleAndPermissionsApiSaveUserEducationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public saveUserEducation(requestParameters: PeopleAndPermissionsApiSaveUserEducationRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).saveUserEducation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save User Employment
     * @param {PeopleAndPermissionsApiSaveUserEmploymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public saveUserEmployment(requestParameters: PeopleAndPermissionsApiSaveUserEmploymentRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).saveUserEmployment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update financial record of User
     * @param {PeopleAndPermissionsApiUpdateFinancialRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public updateFinancialRecord(requestParameters: PeopleAndPermissionsApiUpdateFinancialRecordRequest, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).updateFinancialRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user
     * @param {PeopleAndPermissionsApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public updateUser(requestParameters: PeopleAndPermissionsApiUpdateUserRequest = {}, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).updateUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  
     * @summary Upload user profile
     * @param {PeopleAndPermissionsApiUploadUserProfilePictureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleAndPermissionsApiGenerated
     */
    public uploadUserProfilePicture(requestParameters: PeopleAndPermissionsApiUploadUserProfilePictureRequest, options?: AxiosRequestConfig) {
        return PeopleAndPermissionsApiFp(this.configuration).uploadUserProfilePicture(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
