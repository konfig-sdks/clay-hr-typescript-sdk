/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SkillsCreateNewSkill401Response } from '../models';
// @ts-ignore
import { SkillsCreateNewSkill409Response } from '../models';
// @ts-ignore
import { SkillsCreateNewSkillRequest } from '../models';
// @ts-ignore
import { SkillsCreateNewSkillRequestAssessmentModel } from '../models';
// @ts-ignore
import { SkillsCreateNewSkillRequestSkillTypeModel } from '../models';
// @ts-ignore
import { SkillsCreateNewSkillResponse } from '../models';
// @ts-ignore
import { SkillsGetSkills401Response } from '../models';
// @ts-ignore
import { SkillsGetSkills409Response } from '../models';
// @ts-ignore
import { SkillsGetSkillsResponseInner } from '../models';
// @ts-ignore
import { SkillsGetUserAssignedSkills401Response } from '../models';
// @ts-ignore
import { SkillsGetUserAssignedSkills409Response } from '../models';
// @ts-ignore
import { SkillsGetUserAssignedSkillsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SkillsApi - axios parameter creator
 * @export
 */
export const SkillsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new skill
         * @param {SkillsCreateNewSkillRequest} [skillsCreateNewSkillRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSkill: async (skillsCreateNewSkillRequest?: SkillsCreateNewSkillRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/skill/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: skillsCreateNewSkillRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skill/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(skillsCreateNewSkillRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve skills
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSkills: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/skills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skills',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve skills assigned to a user
         * @param {number} assignedUserID The ID of the user whose skills should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAssignedSkills: async (assignedUserID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignedUserID' is not null or undefined
            assertParamExists('getUserAssignedSkills', 'assignedUserID', assignedUserID)
            const localVarPath = `/userSkill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (assignedUserID !== undefined) {
                localVarQueryParameter['assignedUserID'] = assignedUserID;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/userSkill',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkillsApi - functional programming interface
 * @export
 */
export const SkillsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SkillsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new skill
         * @param {SkillsApiCreateNewSkillRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewSkill(requestParameters: SkillsApiCreateNewSkillRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillsCreateNewSkillResponse>> {
            const skillsCreateNewSkillRequest: SkillsCreateNewSkillRequest = {
                description: requestParameters.description,
                skillCode: requestParameters.skillCode,
                assessmentModel: requestParameters.assessmentModel,
                skillTypeModel: requestParameters.skillTypeModel
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewSkill(skillsCreateNewSkillRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve skills
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSkills(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkillsGetSkillsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSkills(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve skills assigned to a user
         * @param {SkillsApiGetUserAssignedSkillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAssignedSkills(requestParameters: SkillsApiGetUserAssignedSkillsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillsGetUserAssignedSkillsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAssignedSkills(requestParameters.assignedUserID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SkillsApi - factory interface
 * @export
 */
export const SkillsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SkillsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new skill
         * @param {SkillsApiCreateNewSkillRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSkill(requestParameters: SkillsApiCreateNewSkillRequest, options?: AxiosRequestConfig): AxiosPromise<SkillsCreateNewSkillResponse> {
            return localVarFp.createNewSkill(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve skills
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSkills(options?: AxiosRequestConfig): AxiosPromise<Array<SkillsGetSkillsResponseInner>> {
            return localVarFp.getSkills(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve skills assigned to a user
         * @param {SkillsApiGetUserAssignedSkillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAssignedSkills(requestParameters: SkillsApiGetUserAssignedSkillsRequest, options?: AxiosRequestConfig): AxiosPromise<SkillsGetUserAssignedSkillsResponse> {
            return localVarFp.getUserAssignedSkills(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewSkill operation in SkillsApi.
 * @export
 * @interface SkillsApiCreateNewSkillRequest
 */
export type SkillsApiCreateNewSkillRequest = {
    
} & SkillsCreateNewSkillRequest

/**
 * Request parameters for getUserAssignedSkills operation in SkillsApi.
 * @export
 * @interface SkillsApiGetUserAssignedSkillsRequest
 */
export type SkillsApiGetUserAssignedSkillsRequest = {
    
    /**
    * The ID of the user whose skills should be retrieved.
    * @type {number}
    * @memberof SkillsApiGetUserAssignedSkills
    */
    readonly assignedUserID: number
    
}

/**
 * SkillsApiGenerated - object-oriented interface
 * @export
 * @class SkillsApiGenerated
 * @extends {BaseAPI}
 */
export class SkillsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a new skill
     * @param {SkillsApiCreateNewSkillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public createNewSkill(requestParameters: SkillsApiCreateNewSkillRequest, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).createNewSkill(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve skills
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public getSkills(options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).getSkills(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve skills assigned to a user
     * @param {SkillsApiGetUserAssignedSkillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public getUserAssignedSkills(requestParameters: SkillsApiGetUserAssignedSkillsRequest, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).getUserAssignedSkills(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
