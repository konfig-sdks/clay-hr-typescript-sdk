/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PositionsCreatePosition409Response } from '../models';
// @ts-ignore
import { PositionsCreatePositionResponse } from '../models';
// @ts-ignore
import { PositionsGetPosition409Response } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PositionsApi - axios parameter creator
 * @export
 */
export const PositionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Save Position
         * @param {string} name Name of Position
         * @param {number} count Number of openings
         * @param {'OPEN' | 'HOLD'} status Status of Position
         * @param {'pvt' | 'ijp' | 'pub'} accessLevel Access level of Position   \&#39;pvt\&#39; - Private, \&#39;ijp\&#39; - Publish Internally, \&#39;pub\&#39; - Public
         * @param {string} dateOpen Date of Opening
         * @param {string} dateClose Date of Closing
         * @param {string} positionUID Unique Identity of Position
         * @param {number} funnelId Candidate Funnel ID of Position
         * @param {string} [description] Description of Position
         * @param {string} [requirements] Requirements of Position
         * @param {string} [responsibilities] Responsibilities of Position
         * @param {number} [projectid] Project ID of Position
         * @param {number} [approvalFlowId] Position Approval Flow ID of Position
         * @param {number} [locationid] Location ID of Position
         * @param {string} [departmentId] Department ID of Position
         * @param {number} [profileid] Profile ID of Position
         * @param {number} [recruiterId] ID of Recruiter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPosition: async (name: string, count: number, status: 'OPEN' | 'HOLD', accessLevel: 'pvt' | 'ijp' | 'pub', dateOpen: string, dateClose: string, positionUID: string, funnelId: number, description?: string, requirements?: string, responsibilities?: string, projectid?: number, approvalFlowId?: number, locationid?: number, departmentId?: string, profileid?: number, recruiterId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createPosition', 'name', name)
            // verify required parameter 'count' is not null or undefined
            assertParamExists('createPosition', 'count', count)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('createPosition', 'status', status)
            // verify required parameter 'accessLevel' is not null or undefined
            assertParamExists('createPosition', 'accessLevel', accessLevel)
            // verify required parameter 'dateOpen' is not null or undefined
            assertParamExists('createPosition', 'dateOpen', dateOpen)
            // verify required parameter 'dateClose' is not null or undefined
            assertParamExists('createPosition', 'dateClose', dateClose)
            // verify required parameter 'positionUID' is not null or undefined
            assertParamExists('createPosition', 'positionUID', positionUID)
            // verify required parameter 'funnelId' is not null or undefined
            assertParamExists('createPosition', 'funnelId', funnelId)
            const localVarPath = `/position/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (accessLevel !== undefined) {
                localVarQueryParameter['accessLevel'] = accessLevel;
            }

            if (requirements !== undefined) {
                localVarQueryParameter['requirements'] = requirements;
            }

            if (responsibilities !== undefined) {
                localVarQueryParameter['responsibilities'] = responsibilities;
            }

            if (dateOpen !== undefined) {
                localVarQueryParameter['dateOpen'] = dateOpen;
            }

            if (dateClose !== undefined) {
                localVarQueryParameter['dateClose'] = dateClose;
            }

            if (positionUID !== undefined) {
                localVarQueryParameter['positionUID'] = positionUID;
            }

            if (projectid !== undefined) {
                localVarQueryParameter['projectid'] = projectid;
            }

            if (funnelId !== undefined) {
                localVarQueryParameter['funnelId'] = funnelId;
            }

            if (approvalFlowId !== undefined) {
                localVarQueryParameter['approvalFlowId'] = approvalFlowId;
            }

            if (locationid !== undefined) {
                localVarQueryParameter['locationid'] = locationid;
            }

            if (departmentId !== undefined) {
                localVarQueryParameter['departmentId'] = departmentId;
            }

            if (profileid !== undefined) {
                localVarQueryParameter['profileid'] = profileid;
            }

            if (recruiterId !== undefined) {
                localVarQueryParameter['recruiterId'] = recruiterId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/position/save',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve position
         * @param {number} positionid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosition: async (positionid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionid' is not null or undefined
            assertParamExists('getPosition', 'positionid', positionid)
            const localVarPath = `/position/view`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (positionid !== undefined) {
                localVarQueryParameter['positionid'] = positionid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/position/view',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve positions
         * @param {string} [search] 
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionsList: async (search?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/position/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/position/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionsApi - functional programming interface
 * @export
 */
export const PositionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Save Position
         * @param {PositionsApiCreatePositionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPosition(requestParameters: PositionsApiCreatePositionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionsCreatePositionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPosition(requestParameters.name, requestParameters.count, requestParameters.status, requestParameters.accessLevel, requestParameters.dateOpen, requestParameters.dateClose, requestParameters.positionUID, requestParameters.funnelId, requestParameters.description, requestParameters.requirements, requestParameters.responsibilities, requestParameters.projectid, requestParameters.approvalFlowId, requestParameters.locationid, requestParameters.departmentId, requestParameters.profileid, requestParameters.recruiterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve position
         * @param {PositionsApiGetPositionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosition(requestParameters: PositionsApiGetPositionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosition(requestParameters.positionid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve positions
         * @param {PositionsApiGetPositionsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPositionsList(requestParameters: PositionsApiGetPositionsListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPositionsList(requestParameters.search, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PositionsApi - factory interface
 * @export
 */
export const PositionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Save Position
         * @param {PositionsApiCreatePositionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPosition(requestParameters: PositionsApiCreatePositionRequest, options?: AxiosRequestConfig): AxiosPromise<PositionsCreatePositionResponse> {
            return localVarFp.createPosition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve position
         * @param {PositionsApiGetPositionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosition(requestParameters: PositionsApiGetPositionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getPosition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve positions
         * @param {PositionsApiGetPositionsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionsList(requestParameters: PositionsApiGetPositionsListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getPositionsList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPosition operation in PositionsApi.
 * @export
 * @interface PositionsApiCreatePositionRequest
 */
export type PositionsApiCreatePositionRequest = {
    
    /**
    * Name of Position
    * @type {string}
    * @memberof PositionsApiCreatePosition
    */
    readonly name: string
    
    /**
    * Number of openings
    * @type {number}
    * @memberof PositionsApiCreatePosition
    */
    readonly count: number
    
    /**
    * Status of Position
    * @type {'OPEN' | 'HOLD'}
    * @memberof PositionsApiCreatePosition
    */
    readonly status: 'OPEN' | 'HOLD'
    
    /**
    * Access level of Position   \'pvt\' - Private, \'ijp\' - Publish Internally, \'pub\' - Public
    * @type {'pvt' | 'ijp' | 'pub'}
    * @memberof PositionsApiCreatePosition
    */
    readonly accessLevel: 'pvt' | 'ijp' | 'pub'
    
    /**
    * Date of Opening
    * @type {string}
    * @memberof PositionsApiCreatePosition
    */
    readonly dateOpen: string
    
    /**
    * Date of Closing
    * @type {string}
    * @memberof PositionsApiCreatePosition
    */
    readonly dateClose: string
    
    /**
    * Unique Identity of Position
    * @type {string}
    * @memberof PositionsApiCreatePosition
    */
    readonly positionUID: string
    
    /**
    * Candidate Funnel ID of Position
    * @type {number}
    * @memberof PositionsApiCreatePosition
    */
    readonly funnelId: number
    
    /**
    * Description of Position
    * @type {string}
    * @memberof PositionsApiCreatePosition
    */
    readonly description?: string
    
    /**
    * Requirements of Position
    * @type {string}
    * @memberof PositionsApiCreatePosition
    */
    readonly requirements?: string
    
    /**
    * Responsibilities of Position
    * @type {string}
    * @memberof PositionsApiCreatePosition
    */
    readonly responsibilities?: string
    
    /**
    * Project ID of Position
    * @type {number}
    * @memberof PositionsApiCreatePosition
    */
    readonly projectid?: number
    
    /**
    * Position Approval Flow ID of Position
    * @type {number}
    * @memberof PositionsApiCreatePosition
    */
    readonly approvalFlowId?: number
    
    /**
    * Location ID of Position
    * @type {number}
    * @memberof PositionsApiCreatePosition
    */
    readonly locationid?: number
    
    /**
    * Department ID of Position
    * @type {string}
    * @memberof PositionsApiCreatePosition
    */
    readonly departmentId?: string
    
    /**
    * Profile ID of Position
    * @type {number}
    * @memberof PositionsApiCreatePosition
    */
    readonly profileid?: number
    
    /**
    * ID of Recruiter
    * @type {number}
    * @memberof PositionsApiCreatePosition
    */
    readonly recruiterId?: number
    
}

/**
 * Request parameters for getPosition operation in PositionsApi.
 * @export
 * @interface PositionsApiGetPositionRequest
 */
export type PositionsApiGetPositionRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PositionsApiGetPosition
    */
    readonly positionid: number
    
}

/**
 * Request parameters for getPositionsList operation in PositionsApi.
 * @export
 * @interface PositionsApiGetPositionsListRequest
 */
export type PositionsApiGetPositionsListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PositionsApiGetPositionsList
    */
    readonly search?: string
    
    /**
    * Page number
    * @type {number}
    * @memberof PositionsApiGetPositionsList
    */
    readonly page?: number
    
    /**
    * Number of users per page
    * @type {number}
    * @memberof PositionsApiGetPositionsList
    */
    readonly pageSize?: number
    
}

/**
 * PositionsApiGenerated - object-oriented interface
 * @export
 * @class PositionsApiGenerated
 * @extends {BaseAPI}
 */
export class PositionsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Save Position
     * @param {PositionsApiCreatePositionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApiGenerated
     */
    public createPosition(requestParameters: PositionsApiCreatePositionRequest, options?: AxiosRequestConfig) {
        return PositionsApiFp(this.configuration).createPosition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve position
     * @param {PositionsApiGetPositionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApiGenerated
     */
    public getPosition(requestParameters: PositionsApiGetPositionRequest, options?: AxiosRequestConfig) {
        return PositionsApiFp(this.configuration).getPosition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve positions
     * @param {PositionsApiGetPositionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApiGenerated
     */
    public getPositionsList(requestParameters: PositionsApiGetPositionsListRequest = {}, options?: AxiosRequestConfig) {
        return PositionsApiFp(this.configuration).getPositionsList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
