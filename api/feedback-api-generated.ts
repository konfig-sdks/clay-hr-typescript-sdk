/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FeedbackListFeedback400Response } from '../models';
// @ts-ignore
import { FeedbackListFeedback401Response } from '../models';
// @ts-ignore
import { FeedbackListFeedback409Response } from '../models';
// @ts-ignore
import { FeedbackListFeedbackResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FeedbackApi - axios parameter creator
 * @export
 */
export const FeedbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve feedback
         * @param {'all' | 'my' | 'team'} type Type of feedback to retrieve.  Choose between [\&quot;all\&quot;, \&quot;my\&quot;, \&quot;team\&quot;]. all - All Feedback, my - My Feedback, team - Team\&#39;s feedback
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeedback: async (type: 'all' | 'my' | 'team', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listFeedback', 'type', type)
            const localVarPath = `/rm/api/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rm/api/feedback',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedbackApi - functional programming interface
 * @export
 */
export const FeedbackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedbackApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve feedback
         * @param {FeedbackApiListFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeedback(requestParameters: FeedbackApiListFeedbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackListFeedbackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeedback(requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedbackApi - factory interface
 * @export
 */
export const FeedbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedbackApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve feedback
         * @param {FeedbackApiListFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeedback(requestParameters: FeedbackApiListFeedbackRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackListFeedbackResponse> {
            return localVarFp.listFeedback(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listFeedback operation in FeedbackApi.
 * @export
 * @interface FeedbackApiListFeedbackRequest
 */
export type FeedbackApiListFeedbackRequest = {
    
    /**
    * Type of feedback to retrieve.  Choose between [\"all\", \"my\", \"team\"]. all - All Feedback, my - My Feedback, team - Team\'s feedback
    * @type {'all' | 'my' | 'team'}
    * @memberof FeedbackApiListFeedback
    */
    readonly type: 'all' | 'my' | 'team'
    
}

/**
 * FeedbackApiGenerated - object-oriented interface
 * @export
 * @class FeedbackApiGenerated
 * @extends {BaseAPI}
 */
export class FeedbackApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retrieve feedback
     * @param {FeedbackApiListFeedbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiGenerated
     */
    public listFeedback(requestParameters: FeedbackApiListFeedbackRequest, options?: AxiosRequestConfig) {
        return FeedbackApiFp(this.configuration).listFeedback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
