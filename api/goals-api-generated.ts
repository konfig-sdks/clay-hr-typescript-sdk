/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GoalsDeleteGoal401Response } from '../models';
// @ts-ignore
import { GoalsDeleteGoal403Response } from '../models';
// @ts-ignore
import { GoalsDeleteGoal404Response } from '../models';
// @ts-ignore
import { GoalsDeleteGoalResponse } from '../models';
// @ts-ignore
import { GoalsGetGoal401Response } from '../models';
// @ts-ignore
import { GoalsGetGoal404Response } from '../models';
// @ts-ignore
import { GoalsGetGoalResponse } from '../models';
// @ts-ignore
import { GoalsGetUserGoalsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GoalsApi - axios parameter creator
 * @export
 */
export const GoalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new goal
         * @param {number} [additive] 
         * @param {string | Date} [begindate] 
         * @param {number} [cid] 
         * @param {string} [commentCrediteatets] 
         * @param {string} [commentDescription] 
         * @param {number} [companyGoal] 
         * @param {number} [completionRatio] 
         * @param {number} [createUserId] 
         * @param {number} [createtsDate] 
         * @param {number} [createtsDay] 
         * @param {number} [createtsHours] 
         * @param {number} [createtsMinutes] 
         * @param {number} [createtsMonth] 
         * @param {number} [createtsNanos] 
         * @param {number} [createtsSeconds] 
         * @param {number} [createtsTime] 
         * @param {number} [createtsTimezoneOffset] 
         * @param {number} [createtsYear] 
         * @param {string} [crediteatets] 
         * @param {number} [currentValue] 
         * @param {string} [description] 
         * @param {string} [disposition] 
         * @param {number} [elapsedTimeRatio] 
         * @param {number} [goalId] 
         * @param {number} [goalValue] 
         * @param {number} [goalWeightage] 
         * @param {boolean} [hasGoalApprovalPermission] 
         * @param {number} [id] 
         * @param {number} [initialvalue] 
         * @param {boolean} [isForward] 
         * @param {number} [lastUpdateUserId] 
         * @param {number} [objectiveId] 
         * @param {number} [parentGoalId] 
         * @param {number} [progressRatio] 
         * @param {number} [projectid] 
         * @param {number} [reviewUserId] reviewUserId
         * @param {string} [state] 
         * @param {string} [status] 
         * @param {string} [summary] 
         * @param {string | Date} [targetDate] 
         * @param {string} [typecode] 
         * @param {string} [uname] 
         * @param {string} [units] 
         * @param {number} [visibleToDirectReports] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGoal: async (additive?: number, begindate?: string | Date, cid?: number, commentCrediteatets?: string, commentDescription?: string, companyGoal?: number, completionRatio?: number, createUserId?: number, createtsDate?: number, createtsDay?: number, createtsHours?: number, createtsMinutes?: number, createtsMonth?: number, createtsNanos?: number, createtsSeconds?: number, createtsTime?: number, createtsTimezoneOffset?: number, createtsYear?: number, crediteatets?: string, currentValue?: number, description?: string, disposition?: string, elapsedTimeRatio?: number, goalId?: number, goalValue?: number, goalWeightage?: number, hasGoalApprovalPermission?: boolean, id?: number, initialvalue?: number, isForward?: boolean, lastUpdateUserId?: number, objectiveId?: number, parentGoalId?: number, progressRatio?: number, projectid?: number, reviewUserId?: number, state?: string, status?: string, summary?: string, targetDate?: string | Date, typecode?: string, uname?: string, units?: string, visibleToDirectReports?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/goal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (additive !== undefined) {
                localVarQueryParameter['additive'] = additive;
            }

            if (begindate !== undefined) {
                localVarQueryParameter['begindate'] = (begindate as any instanceof Date) ?
                    (begindate as any).toISOString().substr(0,10) :
                    begindate;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (commentCrediteatets !== undefined) {
                localVarQueryParameter['commentCrediteatets'] = commentCrediteatets;
            }

            if (commentDescription !== undefined) {
                localVarQueryParameter['commentDescription'] = commentDescription;
            }

            if (companyGoal !== undefined) {
                localVarQueryParameter['companyGoal'] = companyGoal;
            }

            if (completionRatio !== undefined) {
                localVarQueryParameter['completionRatio'] = completionRatio;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['createUserId'] = createUserId;
            }

            if (createtsDate !== undefined) {
                localVarQueryParameter['createts.date'] = createtsDate;
            }

            if (createtsDay !== undefined) {
                localVarQueryParameter['createts.day'] = createtsDay;
            }

            if (createtsHours !== undefined) {
                localVarQueryParameter['createts.hours'] = createtsHours;
            }

            if (createtsMinutes !== undefined) {
                localVarQueryParameter['createts.minutes'] = createtsMinutes;
            }

            if (createtsMonth !== undefined) {
                localVarQueryParameter['createts.month'] = createtsMonth;
            }

            if (createtsNanos !== undefined) {
                localVarQueryParameter['createts.nanos'] = createtsNanos;
            }

            if (createtsSeconds !== undefined) {
                localVarQueryParameter['createts.seconds'] = createtsSeconds;
            }

            if (createtsTime !== undefined) {
                localVarQueryParameter['createts.time'] = createtsTime;
            }

            if (createtsTimezoneOffset !== undefined) {
                localVarQueryParameter['createts.timezoneOffset'] = createtsTimezoneOffset;
            }

            if (createtsYear !== undefined) {
                localVarQueryParameter['createts.year'] = createtsYear;
            }

            if (crediteatets !== undefined) {
                localVarQueryParameter['crediteatets'] = (crediteatets as any instanceof Date) ?
                    (crediteatets as any).toISOString() :
                    crediteatets;
            }

            if (currentValue !== undefined) {
                localVarQueryParameter['currentValue'] = currentValue;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (disposition !== undefined) {
                localVarQueryParameter['disposition'] = disposition;
            }

            if (elapsedTimeRatio !== undefined) {
                localVarQueryParameter['elapsedTimeRatio'] = elapsedTimeRatio;
            }

            if (goalId !== undefined) {
                localVarQueryParameter['goalId'] = goalId;
            }

            if (goalValue !== undefined) {
                localVarQueryParameter['goalValue'] = goalValue;
            }

            if (goalWeightage !== undefined) {
                localVarQueryParameter['goalWeightage'] = goalWeightage;
            }

            if (hasGoalApprovalPermission !== undefined) {
                localVarQueryParameter['hasGoalApprovalPermission'] = hasGoalApprovalPermission;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (initialvalue !== undefined) {
                localVarQueryParameter['initialvalue'] = initialvalue;
            }

            if (isForward !== undefined) {
                localVarQueryParameter['isForward'] = isForward;
            }

            if (lastUpdateUserId !== undefined) {
                localVarQueryParameter['lastUpdateUserId'] = lastUpdateUserId;
            }

            if (objectiveId !== undefined) {
                localVarQueryParameter['objectiveId'] = objectiveId;
            }

            if (parentGoalId !== undefined) {
                localVarQueryParameter['parentGoalId'] = parentGoalId;
            }

            if (progressRatio !== undefined) {
                localVarQueryParameter['progressRatio'] = progressRatio;
            }

            if (projectid !== undefined) {
                localVarQueryParameter['projectid'] = projectid;
            }

            if (reviewUserId !== undefined) {
                localVarQueryParameter['reviewUserId'] = reviewUserId;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (summary !== undefined) {
                localVarQueryParameter['summary'] = summary;
            }

            if (targetDate !== undefined) {
                localVarQueryParameter['targetDate'] = (targetDate as any instanceof Date) ?
                    (targetDate as any).toISOString().substr(0,10) :
                    targetDate;
            }

            if (typecode !== undefined) {
                localVarQueryParameter['typecode'] = typecode;
            }

            if (uname !== undefined) {
                localVarQueryParameter['uname'] = uname;
            }

            if (units !== undefined) {
                localVarQueryParameter['units'] = units;
            }

            if (visibleToDirectReports !== undefined) {
                localVarQueryParameter['visibleToDirectReports'] = visibleToDirectReports;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goal',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Goal
         * @param {number} goalId GoalId to delete a goal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGoal: async (goalId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('deleteGoal', 'goalId', goalId)
            const localVarPath = `/deletegoal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (goalId !== undefined) {
                localVarQueryParameter['goalId'] = goalId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/deletegoal',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGoals: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/goal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goal',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Goal
         * @param {number} goalid ID to get a goal.
         * @param {number} [reviewUserId] The ID of the user who is reviewee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoal: async (goalid: number, reviewUserId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalid' is not null or undefined
            assertParamExists('getGoal', 'goalid', goalid)
            const localVarPath = `/getgoal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (goalid !== undefined) {
                localVarQueryParameter['goalid'] = goalid;
            }

            if (reviewUserId !== undefined) {
                localVarQueryParameter['reviewUserId'] = reviewUserId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/getgoal',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve goals of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGoals: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/goal/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goal/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalsApi - functional programming interface
 * @export
 */
export const GoalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new goal
         * @param {GoalsApiCreateNewGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewGoal(requestParameters: GoalsApiCreateNewGoalRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewGoal(requestParameters.additive, requestParameters.begindate, requestParameters.cid, requestParameters.commentCrediteatets, requestParameters.commentDescription, requestParameters.companyGoal, requestParameters.completionRatio, requestParameters.createUserId, requestParameters.createtsDate, requestParameters.createtsDay, requestParameters.createtsHours, requestParameters.createtsMinutes, requestParameters.createtsMonth, requestParameters.createtsNanos, requestParameters.createtsSeconds, requestParameters.createtsTime, requestParameters.createtsTimezoneOffset, requestParameters.createtsYear, requestParameters.crediteatets, requestParameters.currentValue, requestParameters.description, requestParameters.disposition, requestParameters.elapsedTimeRatio, requestParameters.goalId, requestParameters.goalValue, requestParameters.goalWeightage, requestParameters.hasGoalApprovalPermission, requestParameters.id, requestParameters.initialvalue, requestParameters.isForward, requestParameters.lastUpdateUserId, requestParameters.objectiveId, requestParameters.parentGoalId, requestParameters.progressRatio, requestParameters.projectid, requestParameters.reviewUserId, requestParameters.state, requestParameters.status, requestParameters.summary, requestParameters.targetDate, requestParameters.typecode, requestParameters.uname, requestParameters.units, requestParameters.visibleToDirectReports, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Goal
         * @param {GoalsApiDeleteGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGoal(requestParameters: GoalsApiDeleteGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsDeleteGoalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGoal(requestParameters.goalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve all goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllGoals(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGoals(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Goal
         * @param {GoalsApiGetGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoal(requestParameters: GoalsApiGetGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetGoalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoal(requestParameters.goalid, requestParameters.reviewUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve goals of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGoals(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetUserGoalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGoals(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GoalsApi - factory interface
 * @export
 */
export const GoalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new goal
         * @param {GoalsApiCreateNewGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGoal(requestParameters: GoalsApiCreateNewGoalRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createNewGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Goal
         * @param {GoalsApiDeleteGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGoal(requestParameters: GoalsApiDeleteGoalRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsDeleteGoalResponse> {
            return localVarFp.deleteGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGoals(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllGoals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Goal
         * @param {GoalsApiGetGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoal(requestParameters: GoalsApiGetGoalRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsGetGoalResponse> {
            return localVarFp.getGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve goals of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGoals(options?: AxiosRequestConfig): AxiosPromise<GoalsGetUserGoalsResponse> {
            return localVarFp.getUserGoals(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewGoal operation in GoalsApi.
 * @export
 * @interface GoalsApiCreateNewGoalRequest
 */
export type GoalsApiCreateNewGoalRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly additive?: number
    
    /**
    * 
    * @type {string | Date}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly begindate?: string | Date
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly cid?: number
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly commentCrediteatets?: string
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly commentDescription?: string
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly companyGoal?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly completionRatio?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createUserId?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsDate?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsDay?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsHours?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsMinutes?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsMonth?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsNanos?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsSeconds?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsTime?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsTimezoneOffset?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly createtsYear?: number
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly crediteatets?: string
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly currentValue?: number
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly description?: string
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly disposition?: string
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly elapsedTimeRatio?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly goalId?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly goalValue?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly goalWeightage?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly hasGoalApprovalPermission?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly id?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly initialvalue?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly isForward?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly lastUpdateUserId?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly objectiveId?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly parentGoalId?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly progressRatio?: number
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly projectid?: number
    
    /**
    * reviewUserId
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly reviewUserId?: number
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly state?: string
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly status?: string
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly summary?: string
    
    /**
    * 
    * @type {string | Date}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly targetDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly typecode?: string
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly uname?: string
    
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly units?: string
    
    /**
    * 
    * @type {number}
    * @memberof GoalsApiCreateNewGoal
    */
    readonly visibleToDirectReports?: number
    
}

/**
 * Request parameters for deleteGoal operation in GoalsApi.
 * @export
 * @interface GoalsApiDeleteGoalRequest
 */
export type GoalsApiDeleteGoalRequest = {
    
    /**
    * GoalId to delete a goal
    * @type {number}
    * @memberof GoalsApiDeleteGoal
    */
    readonly goalId: number
    
}

/**
 * Request parameters for getGoal operation in GoalsApi.
 * @export
 * @interface GoalsApiGetGoalRequest
 */
export type GoalsApiGetGoalRequest = {
    
    /**
    * ID to get a goal.
    * @type {number}
    * @memberof GoalsApiGetGoal
    */
    readonly goalid: number
    
    /**
    * The ID of the user who is reviewee.
    * @type {number}
    * @memberof GoalsApiGetGoal
    */
    readonly reviewUserId?: number
    
}

/**
 * GoalsApiGenerated - object-oriented interface
 * @export
 * @class GoalsApiGenerated
 * @extends {BaseAPI}
 */
export class GoalsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create new goal
     * @param {GoalsApiCreateNewGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public createNewGoal(requestParameters: GoalsApiCreateNewGoalRequest = {}, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).createNewGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Goal
     * @param {GoalsApiDeleteGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public deleteGoal(requestParameters: GoalsApiDeleteGoalRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).deleteGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all goals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getAllGoals(options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getAllGoals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Goal
     * @param {GoalsApiGetGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getGoal(requestParameters: GoalsApiGetGoalRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve goals of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getUserGoals(options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getUserGoals(options).then((request) => request(this.axios, this.basePath));
    }
}
