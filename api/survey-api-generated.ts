/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SurveyGetAllSurveyResponses401Response } from '../models';
// @ts-ignore
import { SurveyGetAllSurveyResponses403Response } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SurveyApi - axios parameter creator
 * @export
 */
export const SurveyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create the item\'s response for a survey
         * @param {number} assignmentId assignmentId
         * @param {number} itemId itemId
         * @param {string} responseValue responseValue
         * @param {string} [authorization] Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemResponse: async (assignmentId: number, itemId: number, responseValue: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('createItemResponse', 'assignmentId', assignmentId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('createItemResponse', 'itemId', itemId)
            // verify required parameter 'responseValue' is not null or undefined
            assertParamExists('createItemResponse', 'responseValue', responseValue)
            const localVarPath = `/api/survey/item/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (responseValue !== undefined) {
                localVarQueryParameter['responseValue'] = responseValue;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/survey/item/save',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a survey response by assignment id
         * @param {number} assignmentId assignmentId
         * @param {string} [authorization] Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResponseByAssignmentId: async (assignmentId: number, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('createResponseByAssignmentId', 'assignmentId', assignmentId)
            const localVarPath = `/api/survey/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/survey/save',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the details of a survey form by form id
         * @param {string} [authorization] Authorization
         * @param {number} [dynamicFormId] dynamicFormId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailsByFormId: async (authorization?: string, dynamicFormId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/survey/view`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (dynamicFormId !== undefined) {
                localVarQueryParameter['dynamicFormId'] = dynamicFormId;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/survey/view',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This page will help you get started with Surveys.
         * @summary Retrieve all the Responses of the Survey
         * @param {number} [surveyId] The ID of the survey.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSurveyResponses: async (surveyId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/survey/allresponses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (surveyId !== undefined) {
                localVarQueryParameter['SurveyId'] = surveyId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/survey/allresponses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of surveys
         * @param {string} [authorization] Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/survey/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/survey/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurveyApi - functional programming interface
 * @export
 */
export const SurveyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurveyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create the item\'s response for a survey
         * @param {SurveyApiCreateItemResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createItemResponse(requestParameters: SurveyApiCreateItemResponseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createItemResponse(requestParameters.assignmentId, requestParameters.itemId, requestParameters.responseValue, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a survey response by assignment id
         * @param {SurveyApiCreateResponseByAssignmentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResponseByAssignmentId(requestParameters: SurveyApiCreateResponseByAssignmentIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResponseByAssignmentId(requestParameters.assignmentId, requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the details of a survey form by form id
         * @param {SurveyApiDetailsByFormIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailsByFormId(requestParameters: SurveyApiDetailsByFormIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailsByFormId(requestParameters.authorization, requestParameters.dynamicFormId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This page will help you get started with Surveys.
         * @summary Retrieve all the Responses of the Survey
         * @param {SurveyApiGetAllSurveyResponsesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSurveyResponses(requestParameters: SurveyApiGetAllSurveyResponsesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSurveyResponses(requestParameters.surveyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of surveys
         * @param {SurveyApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: SurveyApiGetListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SurveyApi - factory interface
 * @export
 */
export const SurveyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurveyApiFp(configuration)
    return {
        /**
         * 
         * @summary Create the item\'s response for a survey
         * @param {SurveyApiCreateItemResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemResponse(requestParameters: SurveyApiCreateItemResponseRequest, options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.createItemResponse(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a survey response by assignment id
         * @param {SurveyApiCreateResponseByAssignmentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResponseByAssignmentId(requestParameters: SurveyApiCreateResponseByAssignmentIdRequest, options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.createResponseByAssignmentId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the details of a survey form by form id
         * @param {SurveyApiDetailsByFormIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailsByFormId(requestParameters: SurveyApiDetailsByFormIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.detailsByFormId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This page will help you get started with Surveys.
         * @summary Retrieve all the Responses of the Survey
         * @param {SurveyApiGetAllSurveyResponsesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSurveyResponses(requestParameters: SurveyApiGetAllSurveyResponsesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getAllSurveyResponses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of surveys
         * @param {SurveyApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: SurveyApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createItemResponse operation in SurveyApi.
 * @export
 * @interface SurveyApiCreateItemResponseRequest
 */
export type SurveyApiCreateItemResponseRequest = {
    
    /**
    * assignmentId
    * @type {number}
    * @memberof SurveyApiCreateItemResponse
    */
    readonly assignmentId: number
    
    /**
    * itemId
    * @type {number}
    * @memberof SurveyApiCreateItemResponse
    */
    readonly itemId: number
    
    /**
    * responseValue
    * @type {string}
    * @memberof SurveyApiCreateItemResponse
    */
    readonly responseValue: string
    
    /**
    * Authorization
    * @type {string}
    * @memberof SurveyApiCreateItemResponse
    */
    readonly authorization?: string
    
}

/**
 * Request parameters for createResponseByAssignmentId operation in SurveyApi.
 * @export
 * @interface SurveyApiCreateResponseByAssignmentIdRequest
 */
export type SurveyApiCreateResponseByAssignmentIdRequest = {
    
    /**
    * assignmentId
    * @type {number}
    * @memberof SurveyApiCreateResponseByAssignmentId
    */
    readonly assignmentId: number
    
    /**
    * Authorization
    * @type {string}
    * @memberof SurveyApiCreateResponseByAssignmentId
    */
    readonly authorization?: string
    
}

/**
 * Request parameters for detailsByFormId operation in SurveyApi.
 * @export
 * @interface SurveyApiDetailsByFormIdRequest
 */
export type SurveyApiDetailsByFormIdRequest = {
    
    /**
    * Authorization
    * @type {string}
    * @memberof SurveyApiDetailsByFormId
    */
    readonly authorization?: string
    
    /**
    * dynamicFormId
    * @type {number}
    * @memberof SurveyApiDetailsByFormId
    */
    readonly dynamicFormId?: number
    
}

/**
 * Request parameters for getAllSurveyResponses operation in SurveyApi.
 * @export
 * @interface SurveyApiGetAllSurveyResponsesRequest
 */
export type SurveyApiGetAllSurveyResponsesRequest = {
    
    /**
    * The ID of the survey.
    * @type {number}
    * @memberof SurveyApiGetAllSurveyResponses
    */
    readonly surveyId?: number
    
}

/**
 * Request parameters for getList operation in SurveyApi.
 * @export
 * @interface SurveyApiGetListRequest
 */
export type SurveyApiGetListRequest = {
    
    /**
    * Authorization
    * @type {string}
    * @memberof SurveyApiGetList
    */
    readonly authorization?: string
    
}

/**
 * SurveyApiGenerated - object-oriented interface
 * @export
 * @class SurveyApiGenerated
 * @extends {BaseAPI}
 */
export class SurveyApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create the item\'s response for a survey
     * @param {SurveyApiCreateItemResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyApiGenerated
     */
    public createItemResponse(requestParameters: SurveyApiCreateItemResponseRequest, options?: AxiosRequestConfig) {
        return SurveyApiFp(this.configuration).createItemResponse(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a survey response by assignment id
     * @param {SurveyApiCreateResponseByAssignmentIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyApiGenerated
     */
    public createResponseByAssignmentId(requestParameters: SurveyApiCreateResponseByAssignmentIdRequest, options?: AxiosRequestConfig) {
        return SurveyApiFp(this.configuration).createResponseByAssignmentId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the details of a survey form by form id
     * @param {SurveyApiDetailsByFormIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyApiGenerated
     */
    public detailsByFormId(requestParameters: SurveyApiDetailsByFormIdRequest = {}, options?: AxiosRequestConfig) {
        return SurveyApiFp(this.configuration).detailsByFormId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This page will help you get started with Surveys.
     * @summary Retrieve all the Responses of the Survey
     * @param {SurveyApiGetAllSurveyResponsesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyApiGenerated
     */
    public getAllSurveyResponses(requestParameters: SurveyApiGetAllSurveyResponsesRequest = {}, options?: AxiosRequestConfig) {
        return SurveyApiFp(this.configuration).getAllSurveyResponses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of surveys
     * @param {SurveyApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyApiGenerated
     */
    public getList(requestParameters: SurveyApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return SurveyApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
