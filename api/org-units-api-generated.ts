/* tslint:disable */
/* eslint-disable */
/*
Expense Reports

API Documentation

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OrgUnitsCreateNewOrgUnit409Response } from '../models';
// @ts-ignore
import { OrgUnitsCreateNewOrgUnitResponse } from '../models';
// @ts-ignore
import { OrgUnitsGetOrgUnits401Response } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrgUnitsApi - axios parameter creator
 * @export
 */
export const OrgUnitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new org unit
         * @param {string} name Name of the org unit.
         * @param {string} description Description of the org unit.
         * @param {number} [deptHead] The ID of the department head.
         * @param {string} [deptHeadName] Name of the department head.
         * @param {string} [departmentCode] The code of the department.
         * @param {number} [departmentId] The ID of the department.
         * @param {string} [departmentLabel] Label for the department.
         * @param {number} [noOfEmployees] Number of employees.
         * @param {number} [parentDepartmentId] The ID of the parent department.
         * @param {string} [parentDepartmentName] Name of the parent department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrgUnit: async (name: string, description: string, deptHead?: number, deptHeadName?: string, departmentCode?: string, departmentId?: number, departmentLabel?: string, noOfEmployees?: number, parentDepartmentId?: number, parentDepartmentName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createNewOrgUnit', 'name', name)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('createNewOrgUnit', 'description', description)
            const localVarPath = `/api/orgunits/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (deptHead !== undefined) {
                localVarQueryParameter['deptHead'] = deptHead;
            }

            if (deptHeadName !== undefined) {
                localVarQueryParameter['deptHeadName'] = deptHeadName;
            }

            if (departmentCode !== undefined) {
                localVarQueryParameter['departmentCode'] = departmentCode;
            }

            if (departmentId !== undefined) {
                localVarQueryParameter['departmentId'] = departmentId;
            }

            if (departmentLabel !== undefined) {
                localVarQueryParameter['departmentLabel'] = departmentLabel;
            }

            if (noOfEmployees !== undefined) {
                localVarQueryParameter['noOfEmployees'] = noOfEmployees;
            }

            if (parentDepartmentId !== undefined) {
                localVarQueryParameter['parentDepartmentId'] = parentDepartmentId;
            }

            if (parentDepartmentName !== undefined) {
                localVarQueryParameter['parentDepartmentName'] = parentDepartmentName;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/orgunits/add',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve org units
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgUnits: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orgunits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "sec0", configuration })
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "userid", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/orgunits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgUnitsApi - functional programming interface
 * @export
 */
export const OrgUnitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgUnitsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new org unit
         * @param {OrgUnitsApiCreateNewOrgUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewOrgUnit(requestParameters: OrgUnitsApiCreateNewOrgUnitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgUnitsCreateNewOrgUnitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewOrgUnit(requestParameters.name, requestParameters.description, requestParameters.deptHead, requestParameters.deptHeadName, requestParameters.departmentCode, requestParameters.departmentId, requestParameters.departmentLabel, requestParameters.noOfEmployees, requestParameters.parentDepartmentId, requestParameters.parentDepartmentName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve org units
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgUnits(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgUnits(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgUnitsApi - factory interface
 * @export
 */
export const OrgUnitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgUnitsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new org unit
         * @param {OrgUnitsApiCreateNewOrgUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrgUnit(requestParameters: OrgUnitsApiCreateNewOrgUnitRequest, options?: AxiosRequestConfig): AxiosPromise<OrgUnitsCreateNewOrgUnitResponse> {
            return localVarFp.createNewOrgUnit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve org units
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgUnits(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getOrgUnits(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewOrgUnit operation in OrgUnitsApi.
 * @export
 * @interface OrgUnitsApiCreateNewOrgUnitRequest
 */
export type OrgUnitsApiCreateNewOrgUnitRequest = {
    
    /**
    * Name of the org unit.
    * @type {string}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly name: string
    
    /**
    * Description of the org unit.
    * @type {string}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly description: string
    
    /**
    * The ID of the department head.
    * @type {number}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly deptHead?: number
    
    /**
    * Name of the department head.
    * @type {string}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly deptHeadName?: string
    
    /**
    * The code of the department.
    * @type {string}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly departmentCode?: string
    
    /**
    * The ID of the department.
    * @type {number}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly departmentId?: number
    
    /**
    * Label for the department.
    * @type {string}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly departmentLabel?: string
    
    /**
    * Number of employees.
    * @type {number}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly noOfEmployees?: number
    
    /**
    * The ID of the parent department.
    * @type {number}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly parentDepartmentId?: number
    
    /**
    * Name of the parent department.
    * @type {string}
    * @memberof OrgUnitsApiCreateNewOrgUnit
    */
    readonly parentDepartmentName?: string
    
}

/**
 * OrgUnitsApiGenerated - object-oriented interface
 * @export
 * @class OrgUnitsApiGenerated
 * @extends {BaseAPI}
 */
export class OrgUnitsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create new org unit
     * @param {OrgUnitsApiCreateNewOrgUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgUnitsApiGenerated
     */
    public createNewOrgUnit(requestParameters: OrgUnitsApiCreateNewOrgUnitRequest, options?: AxiosRequestConfig) {
        return OrgUnitsApiFp(this.configuration).createNewOrgUnit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve org units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgUnitsApiGenerated
     */
    public getOrgUnits(options?: AxiosRequestConfig) {
        return OrgUnitsApiFp(this.configuration).getOrgUnits(options).then((request) => request(this.axios, this.basePath));
    }
}
